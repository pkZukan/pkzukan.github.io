<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Legends Arceus Formats on Zukan Docs</title><link>http://example.org/docs/documentation/hayabusa/formats/</link><description>Recent content in Legends Arceus Formats on Zukan Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://example.org/docs/documentation/hayabusa/formats/index.xml" rel="self" type="application/rss+xml"/><item><title>Evolution Binary (evobin)</title><link>http://example.org/docs/documentation/hayabusa/formats/evobin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/evobin/</guid><description> Evolution Binary (evobin) # Description: # Stub
Schema: # namespace Hayabusa.PokemonLib; file_extension &amp;#34;evobin&amp;#34;; table EvoData { method: uint16; argument: uint16; species: uint16; form: uint16; level: uint16; } table Evo { evo_num: uint16 = 0; evo_unk: uint16 = 0; evo_data: [EvoData]; } table EvoBin { evos: [Evo]; } root_type EvoBin;</description></item><item><title>Personal Binary (perbin)</title><link>http://example.org/docs/documentation/hayabusa/formats/perbin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/perbin/</guid><description> Personal Binary (perbin) # Description: # Stub
Schema: # namespace Hayabusa.PokemonLib; file_extension &amp;#34;perbin&amp;#34;; //Thanks to pkNX team for this one table PersonalData { species: uint16; form: uint16 = 0x1; isPresent: bool; type1: uint8; type2: uint8; ability1: uint16; ability2: uint16; ability3: uint16; stat_HP: uint8; stat_ATK: uint8; stat_DEF: uint8; stat_SPA: uint8; stat_SPD: uint8; stat_SPE: uint8; gender: uint8; growth: uint8; stage: uint8; rate: uint8; unk: uint8; color: uint8; height: uint16; weight: uint16; TM_A: uint32; TM_B: uint32; TM_C: uint32; TM_D: uint32; TR_A: uint32; TR_B: uint32; TR_C: uint32; TR_D: uint32; type_tutor: uint32; baseEXP: uint16 = 0x122; EV_HP: uint8; EV_ATK: uint8; EV_DEF: uint8; EV_SPA: uint8; EV_SPD: uint8; EV_SPE: uint8; item_1: uint16; item_2: uint16; item_3: uint16; group_1: uint8; group_2: uint8; hatch_species: uint16; local_form: uint16; unk_45: uint8 ; unk_46: uint16; unk_47: uint8 ; base_friendship: uint8; hisui_dexno: uint16; national_dexno: uint16; hisui_local_1: uint32; hisui_local_2: uint32; hisui_local_3: uint32; hisui_local_4: uint32; hisui_local_5: uint32; move_shop1: uint32; move_shop2: uint32; } table PersonalTable { entries:[PersonalData]; } root_type PersonalTable;</description></item><item><title>Trinity Animation (tranm)</title><link>http://example.org/docs/documentation/hayabusa/formats/tranm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/tranm/</guid><description> Trinity Animation (tranm) # Description: # Stub
Schema: # namespace Hayabusa.Animation; file_extension &amp;#34;tranm&amp;#34;; struct sVec2 { u: int16; v: int16; } struct Vec2 { u: float; v: float; } struct Vec3 { x: float; y: float; z: float; } struct sVec3 { x:uint16; y:uint16; z:uint16; } struct Vec4 { x:float; y:float; z:float; w:float; } struct Transform { scale:Vec3; rotate:Vec4; translate:Vec3; } union VectorTrack { FixedVectorTrack, DynamicVectorTrack, Framed16VectorTrack, Framed8VectorTrack } table FixedVectorTrack { co: Vec3; } table DynamicVectorTrack { co: [Vec3]; } table Framed16VectorTrack { frames:[uint16]; co: [Vec3]; } table Framed8VectorTrack { frames:[uint8]; co:[Vec3]; } union RotationTrack { FixedRotationTrack, DynamicRotationTrack, Framed16RotationTrack, Framed8RotationTrack } table FixedRotationTrack { co:sVec3; } table DynamicRotationTrack { co:[sVec3]; } table Framed16RotationTrack { frames:[uint16]; co:[sVec3]; } table Framed8RotationTrack { frames:[uint8]; co:[sVec3]; } table BoneTrack { bone_name:string; scale:VectorTrack; rotate:RotationTrack; translate:VectorTrack; } table AnimationInfo { does_loop: uint32; animation_count: uint32; animation_rate: uint32; } table BoneInit { isInit:uint32; transform:Transform; } table BoneAnimation { tracks:[BoneTrack]; initData:BoneInit; } table TRANM { info: AnimationInfo; track: BoneAnimation; } root_type TRANM;</description></item><item><title>Trinity Animation Channels (tracl)</title><link>http://example.org/docs/documentation/hayabusa/formats/tracl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/tracl/</guid><description> Trinity Animation Channels (tracl) # Description: # Stub
Schema: # namespace Hayabusa.Animation; file_extension &amp;#34;tracl&amp;#34;; table ChannelName{ name: string; } table ChannelList{ isList: bool = false; list: [ChannelName]; } table ChannelUnknown { res_0: uint32; } table Channels{ list: ChannelList; unk_1: ChannelUnknown; unk_2: ChannelUnknown; } table Node_Child{ index: uint32 = 0; name: string; channels: Channels; unk: uint32 = 0; } table Node_Root{ children: [Node_Child]; channels: Channels; name: [string]; } table TRACL{ root: Node_Root; } root_type TRACL;</description></item><item><title>Trinity Animation CM (tracm)</title><link>http://example.org/docs/documentation/hayabusa/formats/tracm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/tracm/</guid><description>Trinity Animation CM (tracm) # Description: # Stub
Schema: # namespace Hayabusa.Animation; file_extension &amp;#34;tracm&amp;#34;; union TrackFlag { TrackFlag_Bool, } table TrackFlag_Bool { value: bool; } table TrackFlagsInfo { values: TrackFlag; } table TrackFlags { res_0: uint32; res_1: uint32; info: TrackFlagsInfo; } table TrackMaterialValue { time: float; value: float; config_0: uint32; config_1: uint32; config_2: uint32; } table TrackMaterialValueList { values: [TrackMaterialValue]; } table TrackMaterialInit { name: string; list: TrackMaterialValueList; } table TrackMaterialChannels { red: TrackMaterialValueList; green: TrackMaterialValueList; blue: TrackMaterialValueList; alpha: TrackMaterialValueList; } table TrackMaterialAnim { name: string; list: TrackMaterialChannels; } table TrackMaterial { name: string; init_values: [TrackMaterialInit]; anim_values: [TrackMaterialAnim]; } table TrackMaterialTimeline { res_0: uint32; res_1: uint32; material_track: [TrackMaterial]; unk_3: uint8; //maybe track length related?</description></item><item><title>Trinity Animation CN (tracn)</title><link>http://example.org/docs/documentation/hayabusa/formats/tracn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/tracn/</guid><description> Trinity Animation CN (tracn) # Description: # Stub
Schema: # namespace Hayabusa.Animation; file_extension &amp;#34;tracn&amp;#34;; table AnimationEntry{ animation_name: string; animation_file: string; } table TRACN { list: [AnimationEntry]; } root_type TRACN;</description></item><item><title>Trinity Animation CP (tracp)</title><link>http://example.org/docs/documentation/hayabusa/formats/tracp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/tracp/</guid><description> Trinity Animation CP (tracp) # Description: # Stub
Schema: # namespace Hayabusa.Animation; file_extension &amp;#34;tracp&amp;#34;; table Animation { name: string; res_1: uint32 = 0; unk_2: uint32; unk_3: uint32; } table Moves { name: string; x: float; y: float; z: float; } table Switch { name: string; val: bool; } table Trigger { name: string; } table Entry{ animations: [Animation]; moves: [Moves]; switches: [Switch]; triggers: [Trigger]; } table TRACP { root_node: Entry; } root_type TRACP;</description></item><item><title>Trinity Animation CR (tracr)</title><link>http://example.org/docs/documentation/hayabusa/formats/tracr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/tracr/</guid><description> Trinity Animation CR (tracr) # Description: # Stub
Schema: # namespace Hayabusa.Animation; file_extension &amp;#34;tracr&amp;#34;; table AnimationResource { filename: string; } table MaterialResource { filename: string; } table EffectResource { filename: string; } table TrackResources { animation: AnimationResource; material: MaterialResource; effect: EffectResource; } table Track { track_name: string; res_0: uint32; //Never used res_1: uint32; //Never used track_resource: TrackResources; } table TrackList { list: [Track]; } table TRACR { track_list: TrackList; } root_type TRACR;</description></item><item><title>Trinity Animation CS (tracs)</title><link>http://example.org/docs/documentation/hayabusa/formats/tracs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/tracs/</guid><description>Trinity Technique (trtch) # Description: # Stub
Schema: # namespace Hayabusa.Animation; file_extension &amp;#34;tracs&amp;#34;; enum ConditionType : uint32 { Less = 0, L_Equal, Greater, G_Equal, Equal, N_Equal, } enum StateType : uint32 { Normal = 0, Entry, Exit, Any, Top, } //Grabbed these from Godot, need to test enum TransitionType : uint32 { Immediate = 0, Sync = 1, AtEnd = 2, } union ConditionValue { ConditionValue_Int, ConditionValue_Float, ConditionValue_Bool, ConditionValue_Trigger } table ConditionValue_Int { value:uint32; } table ConditionValue_Float { value:float; } table ConditionValue_Bool { value:int8; } table ConditionValue_Trigger { value:uint8; } table ResourceLabel { resource_name: string; resource_type: uint32; } table Source { label: ResourceLabel; //Why would a state machine //Have an identity matrix.</description></item><item><title>Trinity Animation Effect (traef)</title><link>http://example.org/docs/documentation/hayabusa/formats/traef/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/traef/</guid><description> Trinity Animation Effect (traef) # Description: # Stub
Schema: # namespace Hayabusa.Animation; file_extension &amp;#34;traef&amp;#34;; union EffectValue { EffectValue_Int, EffectValue_Float, EffectValue_Byte, EffectValue_String, } table EffectValue_Int { value: uint32; } table EffectValue_Float { value: float; } table EffectValue_Byte { value: uint8; } table EffectValue_String { value: string; } table Effect { name: string; value: EffectValue; } table AnimationEffect { res_0: uint32; path: string; start: uint32; duration: uint32; effects: [Effect]; } table TRAEF{ effects: [AnimationEffect]; } root_type TRAEF;</description></item><item><title>Trinity Animation LK (tralk)</title><link>http://example.org/docs/documentation/hayabusa/formats/tralk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/tralk/</guid><description> Trinity Animation LK (tralk) # Description: # Stub
Schema: # namespace Hayabusa.Animation; file_extension &amp;#34;tralk&amp;#34;; struct Vec3 { x: float; y: float; z: float; } table LookAt{ channel_name: string; min_rot:Vec3; max_rot:Vec3; unk_3: uint32; unk_4: float; unk_5: float; unk_6: float; unk_7: float; res_8: float; res_9: float; unk_10: float; unk_11: uint32 = 0x5; res_12: uint32 = 0x0; unk_13: [uint32]; unk_14: [uint32]; unk_15: Vec3; unk_16: uint8 = 0x1; unk_17: [float]; unk_18: uint8 = 0x1; unk_19: [float]; unk_20: float; track_name: [string]; unk_22: float; } table TRALK { res_0: uint32 = 0x0; unk_1: [LookAt]; unk_2: uint32 = 0x1; unk_3: uint8 = 0x1; unk_4: float; bone_name: string; } root_type TRALK;</description></item><item><title>Trinity Bone IK (trbik)</title><link>http://example.org/docs/documentation/hayabusa/formats/trbik/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/trbik/</guid><description> Trinity Bone IK (trbik) # Description: # Stub
Schema: # namespace Hayabusa.Animation; file_extension &amp;#34;trbik&amp;#34;; struct Vec3 { x: float; y: float; z: float; } table IKRoot { name: string; unk_0: uint8; value: float; } table Limit { unk_0: uint8; unk_2: uint8; unk_3: Vec3; unk_4: Vec3; unk_5: float; unk_6: float; unk_7: float; unk_8: float; } table Physics { unk_0: uint8; unk_1: float; unk_2: float; unk_3: float; unk_4: float; unk_5: float; unk_6: float; unk_7: float; unk_8: float; unk_9: float; unk_10:float; unk_11: Vec3; } table IKBone { name: string; unk_0: uint8; value: float; name0: string; name1: string; name2: string; name3: string; p1: Limit; p2: Physics; } table TRBIK { root: IKRoot; bones: [IKBone]; } root_type TRBIK;</description></item><item><title>Trinity BSM (trbsm)</title><link>http://example.org/docs/documentation/hayabusa/formats/trbsm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/trbsm/</guid><description> Trinity BSM (trbsm) # Description: # Stub
Schema: # namespace Hayabusa.Model; table UnkEntry { name: string; } table BoneEntry { name: string; slots: [string]; unk_3: float; } table ScalerEntry { name: string; slot_name: [string]; unk_3: uint8; unk_4: [float]; } table MeshEntry { name: string; slot_name: [string]; } table TRBSM { bones: [BoneEntry]; scalers: [ScalerEntry]; mesh: [MeshEntry]; unk: UnkEntry; } root_type TRBSM;</description></item><item><title>Trinity Camera Animation (trcma)</title><link>http://example.org/docs/documentation/hayabusa/formats/trcma/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/trcma/</guid><description> Trinity Camera Animation (trcma) # Description: # Stub
Schema: # namespace Hayabusa.Animation; file_extension &amp;#34;trcma&amp;#34;; struct sVec3 { x: uint16; y: uint16; z: uint16; } struct Vec3 { x: float; y: float; z: float; } union RotationTrack { FixedRotationTrack, DynamicRotationTrack, Framed16RotationTrack, Framed8RotationTrack } table FixedRotationTrack { co:sVec3; } table DynamicRotationTrack { co:[sVec3]; } table Framed16RotationTrack { frames:[uint16]; co:[sVec3]; } table Framed8RotationTrack { frames:[uint8]; co:[sVec3]; } union VectorTrack { FixedVectorTrack, DynamicVectorTrack, Framed16VectorTrack, Framed8VectorTrack } table FixedVectorTrack { co: Vec3; } table DynamicVectorTrack { co: [Vec3]; } table Framed16VectorTrack { frames:[uint16]; co: [Vec3]; } table Framed8VectorTrack { frames:[uint8]; co:[Vec3]; } union FloatTrack { FixedFloatTrack, DynamicFloatTrack, Framed16FloatTrack, Framed8FloatTrack, } table FixedFloatTrack { value: float; } table DynamicFloatTrack { value: [float]; } table Framed16FloatTrack { frames:[uint16]; value:[float]; } table Framed8FloatTrack { frames:[uint8]; value:[float]; } table AnimationInfo { res_0: uint32; duration: uint32; framerate: uint32; } table CameraAnim1 { unk_0: FloatTrack; unk_1: FloatTrack; unk_2: FloatTrack; } table CameraAnim2 { rotation: RotationTrack; translation: VectorTrack; unk_2: VectorTrack; unk_3: VectorTrack; unk_4: VectorTrack; } table CamAnimation { cam_name: string; anim1: CameraAnim1; anim2: CameraAnim2; } table TRCMA { info: AnimationInfo; anim: CamAnimation; } root_type TRCMA;</description></item><item><title>Trinity Material (trmtr)</title><link>http://example.org/docs/documentation/hayabusa/formats/trmtr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/trmtr/</guid><description>Trinity Material (trmtr) # Description: # Contains material stuff.
Schema: # include &amp;#34;math.fbs&amp;#34;; namespace Hayabusa.Model; file_extension &amp;#34;trmtr&amp;#34;; enum UVWrapMode: uint32 { //Time to test these as bit fields? WRAP = 0, //0000 CLAMP = 1, //0001 MIRROR = 6, //0110 MIRROR_ONCE = 7, //0111 } table SamplerState { sampler_state_0: uint32 = 0x0; //Never used sampler_state_1: uint32 = 0x0; //Never used sampler_state_2: uint32 = 0x0; //Never used sampler_state_3: uint32 = 0x0; //Never used sampler_state_4: uint32 = 0x0; //Never used sampler_state_5: uint32 = 0x0; //Never used sampler_state_6: uint32 = 0x0; //Never used sampler_state_7: uint32 = 0x0; //Never used sampler_state_8: uint32 = 0x0; //Never used repeat_u: UVWrapMode = WRAP; //0x1, 0x6 or 0x7 repeat_v: UVWrapMode = WRAP; //0x1, 0x6 or 0x7 repeat_w: UVWrapMode = WRAP; //Never used border_color: RGBA; } table Float4Parameter { property_binding: string; color_value: RGBA; } table FloatParameter { property_binding: string; float_value: float; } table IntParameter { property_binding: string; int_value: int32; } table StringParameter { property_binding: string; string_value: string; } table Shader { shader_name: string; shader_values: [StringParameter]; } table TextureParameter { property_binding: string; texture_file: string; texture_slot: uint32; } table WriteMask { //Only pm0448 has it as 0x0 in Transparent Shader mask: uint8 = 255; } table Int_Extra { res_0: uint32; //0 when Transparent //1 when NonDirectional value: int32 = -1; } table MaterialPass { name: string; shaders: [Shader]; texture_parameters: [TextureParameter]; samplers: [SamplerState]; float_parameters: [FloatParameter]; unk_5: [string]; //Always empty float4_light_parameters: [Float4Parameter]; float4_parameters: [Float4Parameter]; unk_8: [string]; //Always empty int_parameters: [IntParameter]; unk_10: [string]; //Always empty unk_11: [string]; //Always empty unk_12: [string]; //Always empty write_mask: WriteMask; // Maybe shader output write mask?</description></item><item><title>Trinity Mesh (trmsh)</title><link>http://example.org/docs/documentation/hayabusa/formats/trmsh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/trmsh/</guid><description>Trinity Mesh (trmsh) # Description: # Stub
Schema: # include &amp;#34;math.fbs&amp;#34;; namespace Hayabusa.Model; file_extension &amp;#34;trmsh&amp;#34;; enum Attribute : uint32 { NONE = 0, POSITION, NORMAL, TANGENT, BINORMAL, COLOR, TEXCOORD, BLEND_INDICES, BLEND_WEIGHTS, } enum InputLayoutFormat: uint32 { NONE = 0, RGBA_8_UNORM = 20, RGBA_8_UNSIGNED = 22, R_32_UINT = 36, R_32_INT = 37, RGBA_16_UNORM = 39, RGBA_16_FLOAT = 43, RG_32_FLOAT = 48, RGB_32_FLOAT = 51, RGBA_32_FLOAT = 54, } enum IndexLayoutFormat: uint32 { UINT8 = 0, // Unconfirmed UINT16, UINT32, // Unconfirmed UINT64, // Unconfirmed } table BoneWeight { rig_index: uint32; weight: float; } table InputLayoutElement { slot: int32 = -1; // Possibly input slot?</description></item><item><title>Trinity Model (trmdl)</title><link>http://example.org/docs/documentation/hayabusa/formats/trmdl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/trmdl/</guid><description> Trinity Model (trmdl) # Description: # Contains model stuff.
Schema: # include &amp;#34;math.fbs&amp;#34;; namespace Hayabusa.Model; file_extension &amp;#34;trmdl&amp;#34;; table FileReference { filename: string; } table LODIndex { index: uint32; } table LOD { entries: [LODIndex]; type: string; } table TRMDL { unk0: uint32; meshes: [FileReference]; skeleton: FileReference; materials: [string]; lods: [LOD]; bounds: AABB; sperical_bounds: Sphere; } root_type TRMDL;</description></item><item><title>Trinity Model Buffer (trmbf)</title><link>http://example.org/docs/documentation/hayabusa/formats/trmbf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/trmbf/</guid><description> Trinity Model Buffer (trmbf) # Description: # Stub
Schema: # namespace Hayabusa.Model; file_extension &amp;#34;trmbf&amp;#34;; table ByteBuffer { data: [ubyte]; } table MeshBuffer { index_buffer: [ByteBuffer]; vertex_buffer: [ByteBuffer]; } table TRMBF { res_0: uint32; buffers: [MeshBuffer]; } root_type TRMBF;</description></item><item><title>Trinity Model Material Table (trmmt)</title><link>http://example.org/docs/documentation/hayabusa/formats/trmmt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/trmmt/</guid><description> Trinity Model Material Table (trmmt) # Description: # Stub
Schema: # namespace Hayabusa.Model; file_extension &amp;#34;trmmt&amp;#34;; table MaterialSwitches { material_name: string; material_flag: uint8; } table MaterialMapper { mesh_name: string; material_name: string; layer_name: string; } table EmbeddedTRACM { byte_buffer: [uint8]; } //Appears only on Arceus? table MaterialProperties { name: string; mappers: [MaterialMapper]; res_2: uint32; unk_3: uint32; tracm: EmbeddedTRACM; res_5: [uint32]; } table MaterialTable { name: string; file_names: [string]; material_switches: [MaterialSwitches]; material_properties: [MaterialProperties]; } table TRMMT { res_0: uint32; res_1: uint32; material: [MaterialTable]; } root_type TRMMT;</description></item><item><title>Trinity Pokeconfig (trpokecfg)</title><link>http://example.org/docs/documentation/hayabusa/formats/trpokecfg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/trpokecfg/</guid><description>Trinity Pokeconfig (trpokecfg) # Description: # Stub
Schema: # namespace Hayabusa.Model; file_extension &amp;#34;trpokecfg&amp;#34;; enum SpeciesSize : byte { Size_S = 0, Size_M = 1, Size_L = 2, Size_XL = 3, } table TRPOKECFG { size_index: SpeciesSize; unk_1: float; unk_2: float; unk_3: float; inframe_vertical_rot_y_origin: float; inframe_bottom_y_offset: float; inframe_center_y_offset: float; inframe_left_rotation: float; inframe_right_rotation: float; unk_9: float; unk_10_y_offset: float; // Related to y offset (see mons that fly above the ground eg. zubat) unk_11_y_offset: float; // Related to y offset (see mons that fly above the ground eg.</description></item><item><title>Trinity Skeleton (trskl)</title><link>http://example.org/docs/documentation/hayabusa/formats/trskl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/trskl/</guid><description>Trinity Skeleton (trskl) # Description: # Stub
Schema: # include &amp;#34;math.fbs&amp;#34;; namespace Hayabusa.Model; file_extension &amp;#34;trskl&amp;#34;; enum NodeType: uint32 { Transform = 0, Joint = 1, Locator = 2, } table TransformNode { name: string; transform: Transform; scale_pivot: Vec3; rotate_pPivot: Vec3; parent_idx: int32 = -1; rig_idx: int32 = -1; locator_bone: string; type: NodeType; } table IKControl { ik_name: string; ik_chain_start: string; ik_chain_end: string; ik_type: string; res_4: uint32; //Always 0 ik_pos: Vec3; ik_rot: Vec4; } table BoneMatrix { x: Vec3; y: Vec3; z: Vec3; w: Vec3; } table Bone { lock_translation: bool; unk_bool_2: uint8 = 0; // Always set to 1, but 1 is not default.</description></item><item><title>Trinity SPB (trspb)</title><link>http://example.org/docs/documentation/hayabusa/formats/trspb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/trspb/</guid><description> Trinity SPB (trspb) # Description: # Stub
Schema: # namespace Hayabusa.Animation; file_extension &amp;#34;trspb&amp;#34;; table hkSpringBone { path: string; unk_0: uint32; unk_1: uint32; } table TRSPB { unk_0: float; unk_1: float; unk_2: float; hkBones: [hkSpringBone]; } root_type TRSPB;</description></item><item><title>Waza Binary (wazabin)</title><link>http://example.org/docs/documentation/hayabusa/formats/wazabin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/wazabin/</guid><description>Waza Binary (wazabin) # Description: # Stub
Schema: # namespace Hayabusa.PokemonLib; file_extension &amp;#34;wbin&amp;#34;; struct Vec3 { x: float; y: float; z: float; } struct ByteRGB { r: uint8; g: uint8; b: uint8; } union WazaCommand { WazaCommand0x1, ParticleCreate, WazaCommand0x3, WazaCommand0x4, WazaCommand0x5, WazaCommand0x6, WazaCommand0x7, WazaCommand0x8, WazaCommand0x9, WazaCommand0xa, WazaCommand0xb, WazaCommand0xc, ParticleScale, WazaCommand0xe, WazaCommand0xf, WazaCommand0x10, WazaCommand0x11, WazaCommand0x12, WazaCommand0x13, WazaCommand0x14, WazaCommand0x15, WazaCommand0x16, WazaCommand0x17, WazaCommand0x18, WazaCommand0x19, WazaCommand0x1a, WazaCommand0x1b, WazaCommand0x1c, WazaCommand0x1d, WazaCommand0x1e, WazaCommand0x1f, WazaCommand0x20, WazaCommand0x21, WazaCommand0x22, WazaCommand0x23, WazaCommand0x24, WazaCommand0x25, WazaCommand0x26, WazaCommand0x27, WazaCommand0x28, WazaCommand0x29, WazaCommand0x2a, WazaCommand0x2b, WazaCommand0x2c, WazaCommand0x2d, WazaCommand0x2e, WazaCommand0x2f, WazaCommand0x30, WazaCommand0x31, WazaCommand0x32, WazaCommand0x33, WazaCommand0x34, WazaCommand0x35, WazaCommand0x36, WazaCommand0x37, WazaCommand0x38, WazaCommand0x39, WazaCommand0x3a, WazaCommand0x3b, WazaCommand0x3c, WazaCommand0x3d, WazaCommand0x3e, WazaCommand0x3f, WazaCommand0x40, WazaCommand0x41, WazaCommand0x42, WazaCommand0x43, WazaCommand0x44, WazaCommand0x45, WazaCommand0x46, WazaCommand0x47, WazaCommand0x48, WazaCommand0x49, WazaCommand0x4a, WazaCommand0x4b, WazaCommand0x4c, WazaCommand0x4d, WazaCommand0x4e, WazaCommand0x4f, WazaCommand0x50, WazaCommand0x51, WazaCommand0x52, WazaCommand0x53, WazaCommand0x54, WazaCommand0x55, WazaCommand0x56, WazaCommand0x57, WazaCommand0x58, WazaCommand0x59, WazaCommand0x5a, WazaCommand0x5b, WazaCommand0x5c, WazaCommand0x5d, WazaCommand0x5e, WazaCommand0x5f, WazaCommand0x60, WazaCommand0x61, WazaCommand0x62, WazaCommand0x63, WazaCommand0x64, WazaCommand0x65, WazaCommand0x66, WazaCommand0x67, WazaCommand0x68, WazaCommand0x69, WazaCommand0x6a, WazaCommand0x6b, WazaCommand0x6c, WazaCommand0x6d, WazaCommand0x6e, WazaCommand0x6f, WazaCommand0x70, WazaCommand0x71, WazaCommand0x72, WazaCommand0x73, WazaCommand0x74, WazaCommand0x75, WazaCommand0x76, WazaCommand0x77, WazaCommand0x78, WazaCommand0x79, WazaCommand0x7a, WazaCommand0x7b, WazaCommand0x7c, WazaCommand0x7d, WazaCommand0x7e, WazaCommand0x7f, WazaCommand0x80, WazaCommand0x81, WazaCommand0x82, WazaCommand0x83, WazaCommand0x84, WazaCommand0x85, WazaCommand0x86, WazaCommand0x87, WazaCommand0x88, WazaCommand0x89, WazaCommand0x8a, WazaCommand0x8b, WazaCommand0x8c, WazaCommand0x8d, WazaCommand0x8e, WazaCommand0x8f, WazaCommand0x90, WazaCommand0x91, WazaCommand0x92, WazaCommand0x93, Sound3DEvent0x94, Sound3DEvent0x95, Sound3DSoundPostEvent, WazaCommand0x97, WazaCommand0x98, WazaCommand0x99, WazaCommand0x9a, WazaCommand0x9b, WazaCommand0x9c, WazaCommand0x9d, WazaCommand0x9e, WazaCommand0x9f, WazaCommand0xa0, WazaCommand0xa1, WazaCommand0xa2, WazaCommand0xa3, WazaCommand0xa4, WazaCommand0xa5, WazaCommand0xa6, WazaCommand0xa7, WazaCommand0xa8, WazaCommand0xa9, WazaCommand0xaa, WazaCommand0xab, WazaCommand0xac, WazaCommand0xad, WazaCommand0xae, WazaCommand0xaf, WazaCommand0xb0, WazaCommand0xb1, WazaCommand0xb2, WazaCommand0xb3, WazaCommand0xb4, WazaCommand0xb5, WazaCommand0xb6, } table DummyValue { } //cmn_affinity_none.</description></item></channel></rss>