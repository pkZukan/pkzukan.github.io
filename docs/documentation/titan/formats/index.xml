<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scarlet &amp; Violet Formats on Zukan Docs</title><link>http://example.org/docs/documentation/titan/formats/</link><description>Recent content in Scarlet &amp; Violet Formats on Zukan Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://example.org/docs/documentation/titan/formats/index.xml" rel="self" type="application/rss+xml"/><item><title>Character Customization Data (ccdata)</title><link>http://example.org/docs/documentation/titan/formats/ccdata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/ccdata/</guid><description> Character Customization Data (ccdata) # Description: # Contains entries pointing to trmdl and trmtr files.
Schema: # file_extension &amp;#34;ccdata&amp;#34;; table someTable2 { unk0: string; unk1: string; unk2: string; } table Entry { name: string; unk0: byte; model_file: string; material_file: string; unk2: byte; unk3: string; anim_files: [string]; } table CharacterCreationData { entries: [Entry]; unk1: someTable2; unk2: uint; unk3: string; } root_type CharacterCreationData;</description></item><item><title>Character Customization Data Master (ccdatam)</title><link>http://example.org/docs/documentation/titan/formats/ccdatam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/ccdatam/</guid><description> Character Customization Data Master (ccdatam) # Description: # Contains a list of the ccdata files.
Schema: # file_extension &amp;#34;ccdatam&amp;#34;; table Entry { name: string; ccdata_file: string; unk0: string; } table CharacterCreationDataMaster { entries: [Entry]; } root_type CharacterCreationDataMaster;</description></item><item><title>Personal</title><link>http://example.org/docs/documentation/titan/formats/personal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/personal/</guid><description> Personal # Description: # Contains all the base stats, abilities, etc, as well as evo data.
Schema: # struct SpeciesInfo { species_index: uint16; species_form: uint16; species_model: uint16; color: uint8; bodytype: uint8; height: uint16; weight: uint16; res0: uint32; res1: uint32; res2: uint32; } struct StatInfo { HP: uint8; ATK: uint8; DEF: uint8; SPA: uint8; SPD: uint8; SPE: uint8; } struct GenderData { group: uint8; ratio: uint8; } struct EvoData { level: uint16; method: uint16; arg: uint16; res0: uint16; res1: uint16; res2: uint16; species: uint16; form: uint16; } struct Hatch { species: uint16; form: uint16; region: uint16; can_evolve: uint16; } struct ZukanData { index: uint16; group: uint8; } struct Move { move: uint16; level: int8; } table PersonalData { species: SpeciesInfo; is_present: bool; dex: ZukanData; type1: uint8; type2: uint8; ability1: uint16; ability2: uint16; ability3: uint16; growth: uint8; rate: uint8; gender: GenderData; group_1: uint8; group_2: uint8; hatch: Hatch; hatch_steps: uint8; base_friendship: uint8; base_exp: uint16; evo_stage: uint8; unk_flag: uint8; yield_info: StatInfo; stats: StatInfo; evo_table: EvoData; technical_machines: [uint16]; egg_moves: [uint16]; reminder_moves: [uint16]; learnset: [Move]; } table PersonalTable { entries:[PersonalData]; } root_type PersonalTable;</description></item><item><title>Trinity File Descriptor (trpfd)</title><link>http://example.org/docs/documentation/titan/formats/trpfd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trpfd/</guid><description> Trinity File Descriptor (trpfd) # Description: # The trpfd describes the packs and files inside trpfs.
Schema: # namespace Titan.FileSystem; table EmptyTable { } table FileInfo { pack_index: uint64; unk_1: EmptyTable; } table Packinfo { file_size: uint64; file_count: uint64; } table TRPFD { file_hashes: [uint64]; pack_strings: [string]; files: [FileInfo]; packs: [Packinfo]; } root_type TRPFD;</description></item><item><title>Trinity FileSystem (trpfs)</title><link>http://example.org/docs/documentation/titan/formats/trpfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trpfs/</guid><description> Trinity FileSystem (trpfs) # Description: # The trpfs contains most of the game&amp;rsquo;s assets. The trpfd is the descriptor that points to files in trpfs.
Schema: # namespace Titan.FileSystem; table TRPFS { file_hashes: [uint64]; file_offsets: [uint64]; } root_type TRPFS;</description></item><item><title>Trinity Ground Placement Component</title><link>http://example.org/docs/documentation/titan/formats/trinity_groundplacecomponent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_groundplacecomponent/</guid><description> Trinity Ground Placement Component # Description: # Stub
Schema: # namespace Titan.TrinityScene; table trinity_GroundPlaceComponent { index: uint32; } root_type trinity_GroundPlaceComponent;</description></item><item><title>Trinity Material (trmtr)</title><link>http://example.org/docs/documentation/titan/formats/trmtr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trmtr/</guid><description> Trinity Material (trmtr) # Description: # Contains material stuff.
Schema: # namespace Titan.Model; file_extension &amp;#34;trmtr&amp;#34;; struct RGBA { r: float; g: float; b: float; a: float; } enum UVWrapMode: uint32 { //Time to test these as bit fields? WRAP = 0, //0000 CLAMP = 1, //0001 MIRROR = 6, //0110 MIRROR_ONCE = 7, //0111 } table SamplerState { SamplerState_0: uint32 = 0x0; //Never used SamplerState_1: uint32 = 0x0; //Never used SamplerState_2: uint32 = 0x0; //Never used SamplerState_3: uint32 = 0x0; //Never used SamplerState_4: uint32 = 0x0; //Never used SamplerState_5: uint32 = 0x0; //Never used SamplerState_6: uint32 = 0x0; //Never used SamplerState_7: uint32 = 0x0; //Never used SamplerState_8: uint32 = 0x0; //Never used repeat_u: UVWrapMode = WRAP; //0x1, 0x6 or 0x7 repeat_v: UVWrapMode = WRAP; //0x1, 0x6 or 0x7 repeat_w: UVWrapMode = WRAP; //Never used border_color: RGBA; } table Float4Parameter { color_name: string; color_value: RGBA; } table FloatParameter { float_name: string; float_value: float; } table IntParameter { int_name: string; int_value: int32 = -1; } table StringParameter { string_name: string; string_value: string; } table Shader { shader_name: string; shader_values: [StringParameter]; } table Texture { texture_name: string; texture_file: string; texture_slot: uint32 = 0; } table Byte_Extra { //Only pm0448 has it as 0x0 in Transparent Shader value: int8 = -1; } table Int_Extra { res_0: uint32; //0 when Transparent //1 when NonDirectional value: int32 = -1; } table Material{ name: string; shaders: [Shader]; textures: [Texture]; samplers: [SamplerState]; float_parameter: [FloatParameter]; unk_5: string; //Always empty float4_light_parameter: [Float4Parameter]; float4_parameter: [Float4Parameter]; unk_8: string; //Always empty int_parameter: [IntParameter]; unk_10: string; //Always empty unk_11: string; //Always empty unk_12: string; //Always empty byte_extra: Byte_Extra; int_extra: Int_Extra; alpha_type: string; } table TRMTR{ res_0: uint32; materials: [Material]; } root_type TRMTR;</description></item><item><title>Trinity Model (trmdl)</title><link>http://example.org/docs/documentation/titan/formats/trmdl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trmdl/</guid><description> Trinity Model (trmdl) # Description: # Contains model stuff.
Schema: # namespace Titan.Model; file_extension &amp;#34;trmdl&amp;#34;; struct Vec3 { x:float; y:float; z:float; } struct Vec4 { x:float; y:float; z:float; w:float; } table trmeshes { filename: string; } table trskeleton { filename: string; } table LodIndex { unk0: uint32 = 0; } table Lod { index: [LodIndex]; lod_type: string; } table Bounds { min: Vec3; max: Vec3; } table TRMDL { unk0:uint32; meshes:[trmeshes]; skeleton:trskeleton; materials:[string]; lods:[Lod]; bounds: Bounds; unk_vec:Vec4; unk7: uint32; unk8: uint32; unk9: uint32; } root_type TRMDL;</description></item><item><title>Trinity Object Template</title><link>http://example.org/docs/documentation/titan/formats/trinity_objecttemplate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_objecttemplate/</guid><description> Trinity Object Template # Description: # Stub
Schema: # namespace Titan.TrinityScene; table trinity_ObjectTemplate { object_name: string; template_name: string; file_path: string; unk_3: uint8; object_type: string; object_bytes: [uint8]; } root_type trinity_ObjectTemplate;</description></item><item><title>Trinity Particle Component</title><link>http://example.org/docs/documentation/titan/formats/trintity_particlecomponent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trintity_particlecomponent/</guid><description> Trinity Particle Component # Description: # Stub
Schema: # namespace Titan.TrinityScene; table trintity_ParticleComponent { particle_file: string; unk_1: [uint32]; res_2: uint32; particle_name: string; particle_parent: string; } root_type trintity_ParticleComponent;</description></item><item><title>Trinity Property Sheet</title><link>http://example.org/docs/documentation/titan/formats/trinity_propertysheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_propertysheet/</guid><description> Trinity Property Sheet # Description: # Stub
Schema: # namespace Titan.TrinityScene; table someTable3 { unk0: uint64; unk1: bool; } table Property { name: string; value: bool; unk1: someTable3; } table Entry { properties: [Property]; } table trinity_PropertySheet { name: string; template: string; entries: [Entry]; } root_type trinity_PropertySheet;</description></item><item><title>Trinity Scene Object</title><link>http://example.org/docs/documentation/titan/formats/trinity_sceneobject/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_sceneobject/</guid><description> Trinity Scene Object # Description: # Stub
Schema: # include &amp;#34;common.fbs&amp;#34;; namespace Titan.TrinityScene; table trinity_SceneObject { name: string; srt: SRT; unk1: uint32; unk2: uint8; unk3: [uint32]; unk4: uint8; unk5: uint32; unk6: [uint32]; unk7: [string]; } root_type trinity_SceneObject;</description></item><item><title>Trinity Scene Point</title><link>http://example.org/docs/documentation/titan/formats/trinity_scenepoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_scenepoint/</guid><description> Trinity Scene Point # Description: # Stub
Schema: # include &amp;#34;common.fbs&amp;#34;; namespace Titan.TrinityScene; table trinity_ScenePoint { point_name: string; point_location: Vec3f; point_unk: uint8; } root_type trinity_ScenePoint;</description></item><item><title>Trinity Scene/Template (trscn/trsot)</title><link>http://example.org/docs/documentation/titan/formats/trinity_scene/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_scene/</guid><description> Trinity Scene/Template (trscn/trsot) # Description: # Trinity scene graph that contains the following nested types:
trinity_SceneObject trinity_ScenePoint trinity_ScriptComponent trinity_StreamingPoint trintity_ParticleComponent trinity_PropertySheet trinity_ObjectTemplate trinity_GroundPlaceComponent Schema: # namespace Titan.TrinityScene; table ti_AIPerceptualComponent { } table ti_CaptureComponent { } table ti_DynamicExclusionComponent { unk_0: uint8; } table ti_EnvSoundComponent { } table ti_FieldPokemonComponent { } table ti_PokemonModelComponent { } table ti_PokemonModelComponentForSimpleParam { } table ti_pokemonObject { } table ti_PokeVoiceComponent { } table trinity_AnimationComponent { } table trinity_AtmosphereComponent { } table trinity_AttachmentComponent { } table trinity_CameraAnimationComponent { } table trinity_CharacterCreationComponent { } table trinity_CollisionEventTriggerComponent { } table trinity_CombineLODEntity { } table trinity_CombineObjectGroup { } table trinity_CompoundBoxShape { } table trinity_CompoundCapsuleShape { } table trinity_CompoundPencilShape { } table trinity_CompoundSphereShape { } table trinity_ConditionalStreamingArea { } table trinity_ConditionalStreamingConstraint { } table trinity_ConditionalStreamingGroup { } table trinity_ConditionalStreamingReset { } table trinity_config { } table trinity_DecalComponent { } table trinity_EnvironmentParameter { } table trinity_EventStateEventTriggerComponent { } table trinity_GrassCollisionComponent { } table trinity_GridStremingGroup { } table trinity_JointPrioritySetting { } table trinity_LayoutCommonResourceComponent { } table trinity_LayoutComponent { } table trinity_LightApplierComponent { } table trinity_LightDirectApplierComponent { } table trinity_Locator { } table trinity_ModelComponent { } table trinity_ModelCullingSetting { } table trinity_ModelInstancerComponent { } table trinity_ModelLodSetting { } table trinity_NavigatorComponent { } table trinity_NavmeshComponent { } table trinity_ObjectSwitcher { } table trinity_OverrideSensorData { } table trinity_ProgressEventTriggerComponent { } table trinity_SceneController { } table trinity_SceneObjectReference { } table trinity_TerrainCollision { } table trinity_TerrainEntity { } table trinity_TerrainStreamingSetting { } table trinity_TerrainTreeTemplate { } table trinity_TerrainTreeTemplateRoot { } table trinity_TextureBufferComponent { } table trinity_VATComponent { } table SceneEntry { type_name: string; nested_type: [uint8]; sub_objects: [SceneEntry]; } table trinity_Scene { scene_name: string; scene_extra: string; res_2: uint32; res_3: uint32; scene_object_list: [SceneEntry]; res_4: [uint32]; unk_6: uint8; } root_type trinity_Scene;</description></item><item><title>Trinity Script Component</title><link>http://example.org/docs/documentation/titan/formats/trinity_scriptcomponent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_scriptcomponent/</guid><description> Trinity Script Component # Description: # Stub
Schema: # namespace Titan.TrinityScene; table trinity_ScriptComponent { script_file: string; script_hash: string; res_2: uint32; res_3: uint32; res_4: uint32; class_name: string; } root_type trinity_ScriptComponent;</description></item><item><title>Trinity Shader (trsha)</title><link>http://example.org/docs/documentation/titan/formats/trsha/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trsha/</guid><description> Trinity Shader (trsha) # Description: # Stub
Schema: # table SlotMapping { string_value: string; uint_value: uint32; } table SlotMap { slot_name: string; slot_values: [SlotMapping]; bool_1: uint8; bool_2: uint8; bool_3: uint8; slot_index: uint8; offset: uint32; } table TRSHA { name: string; file_name: string; shader_param: [SlotMap]; global_param: [SlotMap]; param_buffer: [uint32]; has_shader_param: bool = false; //maybe contains shader_param has_global_param: bool = false; //maybe contains global_param } root_type TRSHA;</description></item><item><title>Trinity Streaming Point</title><link>http://example.org/docs/documentation/titan/formats/trinity_streamingpoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_streamingpoint/</guid><description> Trinity Streaming Point # Description: # Stub
Schema: # include &amp;#34;common.fbs&amp;#34;; namespace Titan.TrinityScene; table Object { name: string; nested_type: [ubyte]; } table Point { name: string; position: Vec3f; } table Entry { point: Point; objects: [Object]; } table trinity_StreamingPoint { entries: [Entry]; } root_type trinity_StreamingPoint;</description></item><item><title>Trinity Technique (trtch)</title><link>http://example.org/docs/documentation/titan/formats/trtch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trtch/</guid><description> Trinity Technique (trtch) # Description: # Stub
Schema: # table Technique { param_name: string; shader_name: string; destination: string; } table TRTCH { res_0: uint32; technique: [Technique]; } root_type TRTCH;</description></item></channel></rss>