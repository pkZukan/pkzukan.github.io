<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Scarlet &amp; Violet Formats on Zukan Docs</title><link>http://example.org/docs/documentation/titan/formats/</link><description>Recent content in Scarlet &amp; Violet Formats on Zukan Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="http://example.org/docs/documentation/titan/formats/index.xml" rel="self" type="application/rss+xml"/><item><title>Character Customization Data (ccdata)</title><link>http://example.org/docs/documentation/titan/formats/ccdata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/ccdata/</guid><description>Character Customization Data (ccdata)
#
Description:
#
Contains entries pointing to trmdl and trmtr files.
Schema:
#
file_extension &amp;#34;ccdata&amp;#34;; table someTable2 { unk0: string; unk1: string; unk2: string; } table Entry { name: string; unk0: byte; model_file: string; material_file: string; unk2: byte; unk3: string; anim_files: [string]; } table CharacterCreationData { entries: [Entry]; unk1: someTable2; unk2: uint; unk3: string; } root_type CharacterCreationData;</description></item><item><title>Character Customization Data Master (ccdatam)</title><link>http://example.org/docs/documentation/titan/formats/ccdatam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/ccdatam/</guid><description>Character Customization Data Master (ccdatam)
#
Description:
#
Contains a list of the ccdata files.
Schema:
#
file_extension &amp;#34;ccdatam&amp;#34;; table Entry { name: string; ccdata_file: string; unk0: string; } table CharacterCreationDataMaster { entries: [Entry]; } root_type CharacterCreationDataMaster;</description></item><item><title>Jewel Location (jewelloc)</title><link>http://example.org/docs/documentation/titan/formats/jewelloc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/jewelloc/</guid><description>Jewel Location (jewelloc)
#
Description:
#
Stub
Schema:
#
table Unk0 { unk0: uint32; unk1: float; } table Unk1 { res0: uint32; } table Unk2 { x: float; y: float; z: float; } table JewelLoc { name: string; unk0: Unk0; unk1: Unk1; unk2: Unk2; } table JewelLocs { list: [JewelLoc]; } root_type JewelLocs;</description></item><item><title>Personal</title><link>http://example.org/docs/documentation/titan/formats/personal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/personal/</guid><description>Personal
#
Description:
#
Contains all the base stats, abilities, etc, as well as evo data.
Schema:
#
struct SpeciesInfo { species_index: uint16; species_form: uint16; species_model: uint16; color: uint8; bodytype: uint8; height: uint16; weight: uint16; res0: uint32; res1: uint32; res2: uint32; } struct StatInfo { HP: uint8; ATK: uint8; DEF: uint8; SPA: uint8; SPD: uint8; SPE: uint8; } struct GenderData { group: uint8; ratio: uint8; } struct EvoData { species: uint16; form: uint16; region: uint16; can_evolve: uint16; } struct ZukanData { index: uint16; group: uint8; } struct Move { move: uint16; level: int8; } table PersonalData { species: SpeciesInfo; is_present: bool; dex: ZukanData; type1: uint8; type2: uint8; ability1: uint16; ability2: uint16; ability3: uint16; growth: uint8; rate: uint8; gender: GenderData; group_1: uint8; group_2: uint8; evolution_data: EvoData; hatch_steps: uint8; base_friendship: uint8; unk_value: uint16; evo_stage: uint8; unk_flag: uint8; yield_info: StatInfo; stats: StatInfo; evo_table: uint32; technical_machines: [uint16]; egg_moves: [uint16]; reminder_moves: [uint16]; learnset: [Move]; } table PersonalTable { entries:[PersonalData]; } root_type PersonalTable;</description></item><item><title>Trinity Animation (tranm)</title><link>http://example.org/docs/documentation/titan/formats/tranm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/tranm/</guid><description>Trinity Animation (tranm)
#
Description:
#
Stub
Schema:
#
struct sVec2 { u: int16; v: int16; } struct Vec2 { u: float; v: float; } struct Vec3 { x: float; y: float; z: float; } struct sVec3 { x:uint16; y:uint16; z:uint16; } struct Vec4 { x:float; y:float; z:float; w:float; } struct Transform { scale:Vec3; rotate:Vec4; translate:Vec3; } union VectorTrack { FixedVectorTrack, DynamicVectorTrack, Framed16VectorTrack, Framed8VectorTrack } table FixedVectorTrack { co: Vec3; } table DynamicVectorTrack { co: [Vec3]; } table Framed16VectorTrack { frames:[uint16]; co: [Vec3]; } table Framed8VectorTrack { frames:[uint8]; co:[Vec3]; } union RotationTrack { FixedRotationTrack, DynamicRotationTrack, Framed16RotationTrack, Framed8RotationTrack } table FixedRotationTrack { co:sVec3; } table DynamicRotationTrack { co:[sVec3]; } table Framed16RotationTrack { frames:[uint16]; co:[sVec3]; } table Framed8RotationTrack { frames:[uint8]; co:[sVec3]; } table BoneTrack { bone_name:string; scale:VectorTrack; rotate:RotationTrack; translate:VectorTrack; } table AnimationInfo { does_loop: uint32; animation_count: uint32; animation_rate: uint32; } table BoneInit { isInit:uint32; transform:Transform; } table BoneAnimation { tracks:[BoneTrack]; initData:BoneInit; } table TRANM { info: AnimationInfo; track: BoneAnimation; } root_type TRANM;</description></item><item><title>Trinity Animation Channels (tracl)</title><link>http://example.org/docs/documentation/titan/formats/tracl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/tracl/</guid><description>Trinity Animation Channels (tracl)
#
Description:
#
Stub
Schema:
#
table ChannelName{ name: string; } table ChannelList{ isList: bool = false; list: [ChannelName]; } table ChannelUnknown { res_0: uint32; } table Channels{ list: ChannelList; unk_1: ChannelUnknown; unk_2: ChannelUnknown; } table Node_Child{ index: uint32 = 0; name: string; channels: Channels; unk: uint32 = 0; } table Node_Root{ children: [Node_Child]; channels: Channels; name: [string]; } table TRACL{ root: Node_Root; } root_type TRACL;</description></item><item><title>Trinity Animation CM (tracm)</title><link>http://example.org/docs/documentation/titan/formats/tracm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/tracm/</guid><description>Trinity Animation CM (tracm)
#
Description:
#
Stub
Schema:
#
namespace Titan.Animation; file_extension &amp;#34;tracm&amp;#34;; union TrackFlag { TrackFlag_Bool, } table TrackFlag_Bool { value: bool; } table TrackFlagsInfo { values: TrackFlag; } table TrackFlags { res_0: uint32; res_1: uint32; info: TrackFlagsInfo; } table TrackMaterialValue { time: float; value: float; config_0: uint32; config_1: uint32; config_2: uint32; } table TrackMaterialValueList { values: [TrackMaterialValue]; } table TrackMaterialInit { name: string; list: TrackMaterialValueList; } table TrackMaterialChannels { red: TrackMaterialValueList; green: TrackMaterialValueList; blue: TrackMaterialValueList; alpha: TrackMaterialValueList; } table TrackMaterialAnim { name: string; list: TrackMaterialChannels; } table TrackMaterial { name: string; init_values: [TrackMaterialInit]; anim_values: [TrackMaterialAnim]; } table TrackMaterialTimeline { res_0: uint32; res_1: uint32; material_track: [TrackMaterial]; unk_3: uint8; //maybe track length related?</description></item><item><title>Trinity Animation CN (tracn)</title><link>http://example.org/docs/documentation/titan/formats/tracn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/tracn/</guid><description>Trinity Animation CN (tracn)
#
Description:
#
Stub
Schema:
#
namespace Titan.Animation; table AnimationEntry{ animation_name: string; filename: string; } table TRACN { list: [AnimationEntry]; } root_type TRACN;</description></item><item><title>Trinity Animation CP (tracp)</title><link>http://example.org/docs/documentation/titan/formats/tracp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/tracp/</guid><description>Trinity Animation CP (tracp)
#
Description:
#
Stub
Schema:
#
table Animation { name: string; res_1: uint32 = 0; unk_2: uint32; unk_3: uint32; } table Moves { name: string; x: float; y: float; z: float; } table Switch { name: string; val: bool; } table Trigger { name: string; } table Entry{ animations: [Animation]; moves: [Moves]; switches: [Switch]; triggers: [Trigger]; } table TRACP { root_node: Entry; } root_type TRACP;</description></item><item><title>Trinity Animation CR (tracr)</title><link>http://example.org/docs/documentation/titan/formats/tracr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/tracr/</guid><description>Trinity Animation CR (tracr)
#
Description:
#
Stub
Schema:
#
namespace Titan.Animation; table AnimationResource { filename: string; } table MaterialResource { filename: string; } table EffectResource { filename: string; } table TrackResources { animation: AnimationResource; material: MaterialResource; effect: EffectResource; } table Track { track_name: string; res_0: uint32; //Never used res_1: uint32; //Never used track_resource: TrackResources; } table TrackList { list: [Track]; } table TRACR { track_list: TrackList; } root_type TRACR;</description></item><item><title>Trinity Animation CS (tracs)</title><link>http://example.org/docs/documentation/titan/formats/tracs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/tracs/</guid><description>Trinity Technique (trtch)
#
Description:
#
Stub
Schema:
#
enum ConditionType : uint32 { Less = 0, L_Equal, Greater, G_Equal, Equal, N_Equal, } enum StateType : uint32 { Normal = 0, Entry, Exit, Any, Top, } //Grabbed these from Godot, need to test enum TransitionType : uint32 { Immediate = 0, Sync = 1, AtEnd = 2, } union ConditionValue { ConditionValue_Int, ConditionValue_Float, ConditionValue_Bool, ConditionValue_Trigger } table ConditionValue_Int { value:uint32; } table ConditionValue_Float { value:float; } table ConditionValue_Bool { value:int8; } table ConditionValue_Trigger { value:uint8; } table ResourceLabel { resource_name: string; resource_type: uint32; } table Source { label: ResourceLabel; //Why would a state machine //Have an identity matrix.</description></item><item><title>Trinity Animation Effect (traef)</title><link>http://example.org/docs/documentation/titan/formats/traef/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/traef/</guid><description>Trinity Animation Effect (traef)
#
Description:
#
Stub
Schema:
#
union EffectValue { EffectValue_Int, EffectValue_Float, EffectValue_Byte, EffectValue_String, } table EffectValue_Int { value: uint32; } table EffectValue_Float { value: float; } table EffectValue_Byte { value: uint8; } table EffectValue_String { value: string; } table Effect { name: string; value: EffectValue; } table AnimationEffect { res_0: uint32; path: string; start: uint32; duration: uint32; effects: [Effect]; } table TRAEF{ effects: [AnimationEffect]; } root_type TRAEF;</description></item><item><title>Trinity Animation LK (tralk)</title><link>http://example.org/docs/documentation/titan/formats/tralk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/tralk/</guid><description>Trinity Animation LK (tralk)
#
Description:
#
Stub
Schema:
#
struct Vec3 { x: float; y: float; z: float; } table LookAt{ channel_name: string; min_rot:Vec3; max_rot:Vec3; unk_3: uint32; unk_4: float; unk_5: float; unk_6: float; unk_7: float; res_8: float; res_9: float; unk_10: float; unk_11: uint32 = 0x5; res_12: uint32 = 0x0; unk_13: [uint32]; unk_14: [uint32]; unk_15: Vec3; unk_16: uint8 = 0x1; unk_17: [float]; unk_18: uint8 = 0x1; unk_19: [float]; unk_20: float; track_name: [string]; unk_22: float; } table TRALK { res_0: uint32 = 0x0; unk_1: [LookAt]; unk_2: uint32 = 0x1; unk_3: uint8 = 0x1; unk_4: float; bone_name: string; } root_type TRALK;</description></item><item><title>Trinity Bone IK (trbik)</title><link>http://example.org/docs/documentation/titan/formats/trbik/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trbik/</guid><description>Trinity Bone IK (trbik)
#
Description:
#
Stub
Schema:
#
struct Vec3 { x: float; y: float; z: float; } table IKRoot { name: string; unk_0: uint8; value: float; } table Limit { unk_0: uint8; unk_2: uint8; unk_3: Vec3; unk_4: Vec3; unk_5: float; unk_6: float; unk_7: float; unk_8: float; } table Physics { unk_0: uint8; unk_1: float; unk_2: float; unk_3: float; unk_4: float; unk_5: float; unk_6: float; unk_7: float; unk_8: float; unk_9: float; unk_10:float; unk_11: Vec3; } table IKBone { name: string; unk_0: uint8; value: float; name0: string; name1: string; name2: string; name3: string; p1: Limit; p2: Physics; } table TRBIK { root: IKRoot; bones: [IKBone]; } root_type TRBIK;</description></item><item><title>Trinity BSM (trbsm)</title><link>http://example.org/docs/documentation/titan/formats/trbsm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trbsm/</guid><description>Trinity BSM (trbsm)
#
Description:
#
Stub
Schema:
#
namespace Titan.Model; file_extension &amp;#34;trbsm&amp;#34;; table UnkEntry { name: string; } table BoneEntry { name: string; slots: [string]; unk_3: float; } table ScalerEntry { name: string; slot_name: [string]; unk_3: uint8; unk_4: [float]; } table MeshEntry { name: string; slot_name: [string]; } table TRBSM { bones: [BoneEntry]; scalers: [ScalerEntry]; mesh: [MeshEntry]; unk: UnkEntry; } root_type TRBSM;</description></item><item><title>Trinity Camera Animation (trcma)</title><link>http://example.org/docs/documentation/titan/formats/trcma/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trcma/</guid><description>Trinity Camera Animation (trcma)
#
Description:
#
Stub
Schema:
#
namespace Titan.Animation; file_extension &amp;#34;trcma&amp;#34;; struct sVec3 { x: uint16; y: uint16; z: uint16; } struct Vec3 { x: float; y: float; z: float; } union RotationTrack { FixedRotationTrack, DynamicRotationTrack, Framed16RotationTrack, Framed8RotationTrack } table FixedRotationTrack { co:sVec3; } table DynamicRotationTrack { co:[sVec3]; } table Framed16RotationTrack { frames:[uint16]; co:[sVec3]; } table Framed8RotationTrack { frames:[uint8]; co:[sVec3]; } union VectorTrack { FixedVectorTrack, DynamicVectorTrack, Framed16VectorTrack, Framed8VectorTrack } table FixedVectorTrack { co: Vec3; } table DynamicVectorTrack { co: [Vec3]; } table Framed16VectorTrack { frames:[uint16]; co: [Vec3]; } table Framed8VectorTrack { frames:[uint8]; co:[Vec3]; } union FloatTrack { FixedFloatTrack, DynamicFloatTrack, Framed16FloatTrack, Framed8FloatTrack, } table FixedFloatTrack { value: float; } table DynamicFloatTrack { value: [float]; } table Framed16FloatTrack { frames:[uint16]; value:[float]; } table Framed8FloatTrack { frames:[uint8]; value:[float]; } table AnimationInfo { res_0: uint32; duration: uint32; framerate: uint32; } table CameraAnim1 { unk_0: FloatTrack; unk_1: FloatTrack; unk_2: FloatTrack; } table CameraAnim2 { rotation: RotationTrack; translation: VectorTrack; unk_2: VectorTrack; unk_3: VectorTrack; unk_4: VectorTrack; } table CamAnimation { cam_name: string; anim1: CameraAnim1; anim2: CameraAnim2; } table TRCMA { info: AnimationInfo; anim: CamAnimation; } root_type TRCMA;</description></item><item><title>Trinity File Descriptor (trpfd)</title><link>http://example.org/docs/documentation/titan/formats/trpfd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trpfd/</guid><description>Trinity File Descriptor (trpfd)
#
Description:
#
The trpfd describes the packs and files inside trpfs.
Schema:
#
namespace Titan.FileSystem; table EmptyTable { } table FileInfo { pack_index: uint64; unk_1: EmptyTable; } table Packinfo { file_size: uint64; file_count: uint64; } table TRPFD { file_hashes: [uint64]; pack_strings: [string]; files: [FileInfo]; packs: [Packinfo]; } root_type TRPFD;</description></item><item><title>Trinity FileSystem (trpfs)</title><link>http://example.org/docs/documentation/titan/formats/trpfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trpfs/</guid><description>Trinity FileSystem (trpfs)
#
Description:
#
The trpfs contains most of the game&amp;rsquo;s assets. The trpfd is the descriptor that points to files in trpfs.
Schema:
#
namespace Titan.FileSystem; table TRPFS { file_hashes: [uint64]; file_offsets: [uint64]; } root_type TRPFS;</description></item><item><title>Trinity Ground Placement Component</title><link>http://example.org/docs/documentation/titan/formats/trinity_groundplacecomponent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_groundplacecomponent/</guid><description>Trinity Ground Placement Component
#
Description:
#
Stub
Schema:
#
namespace Titan.TrinityScene; table trinity_GroundPlaceComponent { index: uint32; } root_type trinity_GroundPlaceComponent;</description></item><item><title>Trinity LookupTables (trltt)</title><link>http://example.org/docs/documentation/titan/formats/trltt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trltt/</guid><description>Trinity LookupTables (trltt)
#
Description:
#
Stub
Schema:
#
namespace Titan.Model; struct Vec3f { x: float; y: float; z: float; } struct Vec3i { x: int32; y: int32; z: int32; } table Table2 { shape_name: string; } table LookupTable { shape_name: string; name: string; unk_2: Vec3i; mesh_names: [string]; base_shape: [Table2]; some_positions: [Vec3f]; } table TRLTT { res_0: uint32; entries: [LookupTable]; } root_type TRLTT;</description></item><item><title>Trinity Material (trmtr)</title><link>http://example.org/docs/documentation/titan/formats/trmtr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trmtr/</guid><description>Trinity Material (trmtr)
#
Description:
#
Contains material stuff.
Schema:
#
namespace Titan.Model; file_extension &amp;#34;trmtr&amp;#34;; struct RGBA { r: float; g: float; b: float; a: float; } enum UVWrapMode: uint32 { //Time to test these as bit fields? WRAP = 0, //0000 CLAMP = 1, //0001 MIRROR = 6, //0110 MIRROR_ONCE = 7, //0111 } table SamplerState { SamplerState_0: uint32 = 0x0; //Never used SamplerState_1: uint32 = 0x0; //Never used SamplerState_2: uint32 = 0x0; //Never used SamplerState_3: uint32 = 0x0; //Never used SamplerState_4: uint32 = 0x0; //Never used SamplerState_5: uint32 = 0x0; //Never used SamplerState_6: uint32 = 0x0; //Never used SamplerState_7: uint32 = 0x0; //Never used SamplerState_8: uint32 = 0x0; //Never used repeat_u: UVWrapMode = WRAP; //0x1, 0x6 or 0x7 repeat_v: UVWrapMode = WRAP; //0x1, 0x6 or 0x7 repeat_w: UVWrapMode = WRAP; //Never used border_color: RGBA; } table Float4Parameter { color_name: string; color_value: RGBA; } table FloatParameter { float_name: string; float_value: float; } table IntParameter { int_name: string; int_value: int32 = -1; } table StringParameter { string_name: string; string_value: string; } table Shader { shader_name: string; shader_values: [StringParameter]; } table Texture { texture_name: string; texture_file: string; texture_slot: uint32 = 0; } table Byte_Extra { //Only pm0448 has it as 0x0 in Transparent Shader value: int8 = -1; } table Int_Extra { res_0: uint32; //0 when Transparent //1 when NonDirectional value: int32 = -1; } table Material{ name: string; shaders: [Shader]; textures: [Texture]; samplers: [SamplerState]; float_parameter: [FloatParameter]; unk_5: string; //Always empty float4_light_parameter: [Float4Parameter]; float4_parameter: [Float4Parameter]; unk_8: string; //Always empty int_parameter: [IntParameter]; unk_10: string; //Always empty unk_11: string; //Always empty unk_12: string; //Always empty byte_extra: Byte_Extra; int_extra: Int_Extra; alpha_type: string; } table TRMTR{ res_0: uint32; materials: [Material]; } root_type TRMTR;</description></item><item><title>Trinity MDT (trmdt)</title><link>http://example.org/docs/documentation/titan/formats/trmdt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trmdt/</guid><description>Trinity MDT (trmdt)
#
Description:
#
Stub
Schema:
#
namespace Titan.Animation; table TRMDT { list: [string]; } root_type TRMDT;</description></item><item><title>Trinity Mesh (trmsh)</title><link>http://example.org/docs/documentation/titan/formats/trmsh/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trmsh/</guid><description>Trinity Mesh (trmsh)
#
Description:
#
Stub
Schema:
#
namespace Titan.Model; file_extension &amp;#34;trmsh&amp;#34;; enum VertexAttribute : uint32 { NONE = 0, POSITION, NORMAL, TANGENT, BINORMAL, COLOR, TEX_COORD, BLEND_INDICES, BLEND_WEIGHTS, USER, USER_ID, } enum MorphAttribute: uint32 { NONE = 0, POSITION = 1, MIN_LIMIT = 2, MAX_LIMIT = 3, USER_ID = 10, } enum Type: uint32 { NONE = 0, R8_G8_B8_A8_UNSIGNED_NORMALIZED = 20, W8_X8_Y8_Z8_UNSIGNED = 22, X32_UINT = 36, X32_INT = 37, W16_X16_Y16_Z16_SIGNED_NORMALIZED = 39, W16_X16_Y16_Z16_FLOAT = 43, X32_Y32_FLOAT = 48, X32_Y32_Z32_FLOAT = 51, W32_X32_Y32_Z32_FLOAT = 54, } enum PolygonType: uint32 { X8_Y8_Z8_UNSIGNED = 0, X16_Y16_Z16_UNSIGNED, X32_Y32_Z32_UNSIGNED, X64_Y64_Z64_UNSIGNED, } struct Sphere { x:float; y:float; z:float; radius:float; } struct Vec4 { w:float; x:float; y:float; z:float; } struct Vec3 { x:float; y:float; z:float; } table BoundingBox { min: Vec3; max: Vec3; } table Influence { //TODO: Fuck around with this value index: uint32; scale: float; } table VertexAccessor { attr_0: int32 = -1; attribute: VertexAttribute = 0; attribute_layer: uint32 = 0; //Chooses which Color or UV layer to use type: Type; position: uint32 = 0; } table VertexSize { size: uint32; } table VertexAccessors { attrs: [VertexAccessor]; size: [VertexSize]; } table MaterialInfo { poly_count: uint32; poly_offset: uint32; sh_unk3: uint32; material_name: string; sh_unk4: int32 = -1; } table MorphAccessor { unk_0: uint32; attribute: MorphAttribute = 0; unk_1: uint32 = 0; type: Type; position: uint32; } table MorphSize { size: uint32; } table MorphData { attrs: [MorphAccessor]; size: [MorphSize]; } table MorphMetaData { morph_index: uint32; morph_name: string; morph_type: uint8; } table MorphShape { data: [MorphData]; metadata: [MorphMetaData]; morph_name: string; } table VisShape { index: uint32; name: string; } table MeshShape { mesh_shape_name: string; bounds: BoundingBox; polygon_type: PolygonType; attributes: [VertexAccessors]; materials: [MaterialInfo]; //Always zero for these four res0: uint32 = 0; res1: uint32 = 0; res2: uint32 = 0; res3: uint32 = 0; clip_sphere: Sphere; influence: [Influence]; vis_shapes: [VisShape]; // Maybe shape name?</description></item><item><title>Trinity Model (trmdl)</title><link>http://example.org/docs/documentation/titan/formats/trmdl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trmdl/</guid><description>Trinity Model (trmdl)
#
Description:
#
Contains model stuff.
Schema:
#
namespace Titan.Model; file_extension &amp;#34;trmdl&amp;#34;; struct Vec3 { x:float; y:float; z:float; } struct Vec4 { x:float; y:float; z:float; w:float; } table trmeshes { filename: string; } table trskeleton { filename: string; } table LodIndex { unk0: uint32 = 0; } table Lod { index: [LodIndex]; lod_type: string; } table Bounds { min: Vec3; max: Vec3; } table TRMDL { unk0:uint32; meshes:[trmeshes]; skeleton:trskeleton; materials:[string]; lods:[Lod]; bounds: Bounds; unk_vec:Vec4; unk7: uint32; unk8: uint32; unk9: uint32; } root_type TRMDL;</description></item><item><title>Trinity Model Buffer (trmbf)</title><link>http://example.org/docs/documentation/titan/formats/trmbf/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trmbf/</guid><description>Trinity Model Buffer (trmbf)
#
Description:
#
Stub
Schema:
#
namespace Titan.Model; file_extension &amp;#34;trmbf&amp;#34;; table Indexes { buffer:[ubyte]; } table Vertices { buffer: [ubyte]; } table MorphBuffer { buffer: [ubyte]; } table Morphs { morph_buffer: [MorphBuffer]; } table Buffer { index_buffer: [Indexes]; vertex_buffer: [Vertices]; morphs: [Morphs]; } table TRMBF { unused: uint32; buffers:[Buffer]; } root_type TRMBF;</description></item><item><title>Trinity Model Material Table (trmmt)</title><link>http://example.org/docs/documentation/titan/formats/trmmt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trmmt/</guid><description>Trinity Model Material Table (trmmt)
#
Description:
#
Stub
Schema:
#
namespace Titan.Model; file_extension &amp;#34;trmmt&amp;#34;; table MaterialSwitches { material_name: string; material_flag: uint8; } table MaterialMapper { mesh_name: string; material_name: string; layer_name: string; } table EmbeddedTRACM { bytebuffer: [uint8]; } //Appears only on Arceus? table MaterialProperties { name: string; mappers: [MaterialMapper]; res_2: uint32; unk_3: uint32; tracm: EmbeddedTRACM; res_5: [uint32]; } table MMT { name: string; material_name: [string]; material_switches: [MaterialSwitches]; material_properties: [MaterialProperties]; } table TRMMT { res_0: uint32; res_1: uint32; material: [MMT]; } root_type TRMMT;</description></item><item><title>Trinity Object Template</title><link>http://example.org/docs/documentation/titan/formats/trinity_objecttemplate/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_objecttemplate/</guid><description>Trinity Object Template
#
Description:
#
Stub
Schema:
#
namespace Titan.TrinityScene; table trinity_ObjectTemplate { object_name: string; template_name: string; file_path: string; unk_3: uint8; object_type: string; object_bytes: [uint8]; } root_type trinity_ObjectTemplate;</description></item><item><title>Trinity Particle Component</title><link>http://example.org/docs/documentation/titan/formats/trintity_particlecomponent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trintity_particlecomponent/</guid><description>Trinity Particle Component
#
Description:
#
Stub
Schema:
#
namespace Titan.TrinityScene; table trintity_ParticleComponent { particle_file: string; unk_1: [uint32]; res_2: uint32; particle_name: string; particle_parent: string; } root_type trintity_ParticleComponent;</description></item><item><title>Trinity Pokeconfig (trpokecfg)</title><link>http://example.org/docs/documentation/titan/formats/trpokecfg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trpokecfg/</guid><description>Trinity Pokeconfig (trpokecfg)
#
Description:
#
Stub
Schema:
#
namespace Titan.Model; file_extension &amp;#34;trpokecfg&amp;#34;; table TRPOKECFG { unk_0: uint8; unk_1: float; unk_2: float; unk_3: float; unk_4: float; unk_5: float; unk_6: float; unk_7: float; unk_8: float; unk_9: float; unk_10: float; unk_11: float; unk_12: float; } root_type TRPOKECFG;</description></item><item><title>Trinity Property Sheet</title><link>http://example.org/docs/documentation/titan/formats/trinity_propertysheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_propertysheet/</guid><description>Trinity Property Sheet
#
Description:
#
Stub
Schema:
#
namespace Titan.TrinityScene; table someTable3 { unk0: uint64; unk1: bool; } table Property { name: string; value: bool; unk1: someTable3; } table Entry { properties: [Property]; } table trinity_PropertySheet { name: string; template: string; entries: [Entry]; } root_type trinity_PropertySheet;</description></item><item><title>Trinity Scene Object</title><link>http://example.org/docs/documentation/titan/formats/trinity_sceneobject/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_sceneobject/</guid><description>Trinity Scene Object
#
Description:
#
Stub
Schema:
#
include &amp;#34;common.fbs&amp;#34;; namespace Titan.TrinityScene; table trinity_SceneObject { name: string; srt: SRT; unk1: uint32; unk2: uint8; unk3: [uint32]; unk4: uint8; unk5: uint32; unk6: [uint32]; unk7: [string]; } root_type trinity_SceneObject;</description></item><item><title>Trinity Scene Point</title><link>http://example.org/docs/documentation/titan/formats/trinity_scenepoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_scenepoint/</guid><description>Trinity Scene Point
#
Description:
#
Stub
Schema:
#
include &amp;#34;common.fbs&amp;#34;; namespace Titan.TrinityScene; table trinity_ScenePoint { point_name: string; point_location: Vec3f; point_unk: uint8; } root_type trinity_ScenePoint;</description></item><item><title>Trinity Scene/Template (trscn/trsot)</title><link>http://example.org/docs/documentation/titan/formats/trinity_scene/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_scene/</guid><description>Trinity Scene/Template (trscn/trsot)
#
Description:
#
Trinity scene graph that contains the following nested types:
trinity_SceneObject trinity_ScenePoint trinity_ScriptComponent trinity_StreamingPoint trintity_ParticleComponent trinity_PropertySheet trinity_ObjectTemplate trinity_GroundPlaceComponent Schema:
#
namespace Titan.TrinityScene; table ti_AIPerceptualComponent { } table ti_CaptureComponent { } table ti_DynamicExclusionComponent { unk_0: uint8; } table ti_EnvSoundComponent { } table ti_FieldPokemonComponent { } table ti_PokemonModelComponent { } table ti_PokemonModelComponentForSimpleParam { } table ti_pokemonObject { } table ti_PokeVoiceComponent { } table trinity_AnimationComponent { } table trinity_AtmosphereComponent { } table trinity_AttachmentComponent { } table trinity_CameraAnimationComponent { } table trinity_CharacterCreationComponent { } table trinity_CollisionEventTriggerComponent { } table trinity_CombineLODEntity { } table trinity_CombineObjectGroup { } table trinity_CompoundBoxShape { } table trinity_CompoundCapsuleShape { } table trinity_CompoundPencilShape { } table trinity_CompoundSphereShape { } table trinity_ConditionalStreamingArea { } table trinity_ConditionalStreamingConstraint { } table trinity_ConditionalStreamingGroup { } table trinity_ConditionalStreamingReset { } table trinity_config { } table trinity_DecalComponent { } table trinity_EnvironmentParameter { } table trinity_EventStateEventTriggerComponent { } table trinity_GrassCollisionComponent { } table trinity_GridStremingGroup { } table trinity_JointPrioritySetting { } table trinity_LayoutCommonResourceComponent { } table trinity_LayoutComponent { } table trinity_LightApplierComponent { } table trinity_LightDirectApplierComponent { } table trinity_Locator { } table trinity_ModelComponent { } table trinity_ModelCullingSetting { } table trinity_ModelInstancerComponent { } table trinity_ModelLodSetting { } table trinity_NavigatorComponent { } table trinity_NavmeshComponent { } table trinity_ObjectSwitcher { } table trinity_OverrideSensorData { } table trinity_ProgressEventTriggerComponent { } table trinity_SceneController { } table trinity_SceneObjectReference { } table trinity_TerrainCollision { } table trinity_TerrainEntity { } table trinity_TerrainStreamingSetting { } table trinity_TerrainTreeTemplate { } table trinity_TerrainTreeTemplateRoot { } table trinity_TextureBufferComponent { } table trinity_VATComponent { } table SceneEntry { type_name: string; nested_type: [uint8]; sub_objects: [SceneEntry]; } table trinity_Scene { scene_name: string; scene_extra: string; res_2: uint32; res_3: uint32; scene_object_list: [SceneEntry]; res_4: [uint32]; unk_6: uint8; } root_type trinity_Scene;</description></item><item><title>Trinity Script Component</title><link>http://example.org/docs/documentation/titan/formats/trinity_scriptcomponent/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_scriptcomponent/</guid><description>Trinity Script Component
#
Description:
#
Stub
Schema:
#
namespace Titan.TrinityScene; table trinity_ScriptComponent { script_file: string; script_hash: string; res_2: uint32; res_3: uint32; res_4: uint32; class_name: string; } root_type trinity_ScriptComponent;</description></item><item><title>Trinity Shader (trsha)</title><link>http://example.org/docs/documentation/titan/formats/trsha/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trsha/</guid><description>Trinity Shader (trsha)
#
Description:
#
Stub
Schema:
#
table SlotMapping { string_value: string; uint_value: uint32; } table SlotMap { slot_name: string; slot_values: [SlotMapping]; bool_1: uint8; bool_2: uint8; bool_3: uint8; slot_index: uint8; offset: uint32; } table TRSHA { name: string; file_name: string; shader_param: [SlotMap]; global_param: [SlotMap]; param_buffer: [uint32]; has_shader_param: bool = false; //maybe contains shader_param has_global_param: bool = false; //maybe contains global_param } root_type TRSHA;</description></item><item><title>Trinity Skeleton (trskl)</title><link>http://example.org/docs/documentation/titan/formats/trskl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trskl/</guid><description>Trinity Skeleton (trskl)
#
Description:
#
Stub
Schema:
#
namespace Titan.Model; file_extension &amp;#34;trskl&amp;#34;; struct Vec3 { x: float; y: float; z: float; } struct Vec4 { w: float; x: float; y: float; z: float; } enum NodeType: uint32 { Default = 0, Chained = 1, //Present for finger bones Floating = 2, //Present for eye, mouth and feet bones } table Transform { VecScale: Vec3; VecRot: Vec3; VecTranslate: Vec3; } table TransformNode { name: string; transform: Transform; scalePivot: Vec3; rotatePivot: Vec3; parent_idx: int32 = -1; rig_idx: int32 = -1; effect_node: string; type: NodeType; } table IKControl{ ik_name: string; ik_chain_start: string; ik_chain_end: string; ik_type: string; res_4: uint32; //Always 0 ik_pos: Vec3; ik_rot: Vec4; } table BoneMatrix{ x: Vec3; y: Vec3; z: Vec3; w: Vec3; } table Bone { inherit_position: uint8; //Value (0,1) Probably SegmentScaleCompensate?</description></item><item><title>Trinity SPB (trspb)</title><link>http://example.org/docs/documentation/titan/formats/trspb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trspb/</guid><description>Trinity SPB (trspb)
#
Description:
#
Stub
Schema:
#
namespace Titan.Animation; file_extension &amp;#34;trspb&amp;#34;; table hkSpringBone { path: string; unk_0: uint32; unk_1: uint32; } table TRSPB { unk_0: float; unk_1: float; unk_2: float; hkBones: [hkSpringBone]; } root_type TRSPB;</description></item><item><title>Trinity Streaming Point</title><link>http://example.org/docs/documentation/titan/formats/trinity_streamingpoint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trinity_streamingpoint/</guid><description>Trinity Streaming Point
#
Description:
#
Stub
Schema:
#
include &amp;#34;common.fbs&amp;#34;; namespace Titan.TrinityScene; table Object { name: string; nested_type: [ubyte]; } table Point { name: string; position: Vec3f; } table Entry { point: Point; objects: [Object]; } table trinity_StreamingPoint { entries: [Entry]; } root_type trinity_StreamingPoint;</description></item><item><title>Trinity Technique (trtch)</title><link>http://example.org/docs/documentation/titan/formats/trtch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trtch/</guid><description>Trinity Technique (trtch)
#
Description:
#
Stub
Schema:
#
table Technique { param_name: string; shader_name: string; destination: string; } table TRTCH { res_0: uint32; technique: [Technique]; } root_type TRTCH;</description></item></channel></rss>