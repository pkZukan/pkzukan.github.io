<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Zukan Docs</title><link>http://example.org/</link><description>Recent content in Home on Zukan Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 28 Oct 2022 21:41:40 -0400</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Asset Assistant</title><link>http://example.org/docs/tools/assetassistant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/tools/assetassistant/</guid><description>Description: # A WIP re-impl of the AssetAssistant lib
Link: # https://github.com/Reisyukaku/AssetAssistant</description></item><item><title>Character Customization Data (ccdata)</title><link>http://example.org/docs/games/titan/ccdata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/games/titan/ccdata/</guid><description> Character Customization Data (ccdata) # Description: # Contains entries pointing to trmdl and trmtr files.
Schema: # file_extension &amp;#34;ccdata&amp;#34;; table someTable2 { unk0: string; unk1: string; unk2: string; } table Entry { name: string; unk0: byte; model_file: string; material_file: string; unk2: byte; unk3: string; anim_files: [string]; } table CharacterCreationData { entries: [Entry]; unk1: someTable2; unk2: uint; unk3: string; } root_type CharacterCreationData;</description></item><item><title>Character Customization Data Master (ccdatam)</title><link>http://example.org/docs/games/titan/ccdatam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/games/titan/ccdatam/</guid><description> Character Customization Data Master (ccdatam) # Description: # Contains a list of the ccdata files.
Schema: # file_extension &amp;#34;ccdatam&amp;#34;; table Entry { name: string; ccdata_file: string; unk0: string; } table CharacterCreationDataMaster { entries: [Entry]; } root_type CharacterCreationDataMaster;</description></item><item><title>ExeFS</title><link>http://example.org/docs/games/titan/exefs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/games/titan/exefs/</guid><description>Scarlet &amp;amp; Violet (ExeFS) # Titan
Notable facts: # Uses new trpfs file system Uses Lua 5.4 Game logic written in haxe and compiled to binary lua A lot more game logic moved to haxe/lua than previous games Notable Lua offsets: # Function Description Offset (1.0.0) Offset (1.0.1) Offset (1.1.0) LuaNewState Create a new LuaState struct 0x00ADAE00 0x0003B420 0x0003B420 LuaLoadbuffer Loads a string of plaintext lua code 0x00D69E70 0x00D9EEF0 0x00DC6A80 LuaPCall Calls loaded function on the stack 0x0099E3B0 0x009B96C0 0x009C8B20 LuaToString Pops string off the lua stack 0x009AEB10 0x009CA610 0x009D99A0 LuaSetTop Sets Lua stack 0x0099DF80 0x009B9290 0x009C86F0 LuaGetTop Gets Lua stack pos 0x0099DF60 0x009B9270 0x009C86D0 LuaType Get Lua type 0x00A4DD50 0x00A96B40 0x00AAEA90 LuaPrint Prints lua value to stdout 0x00045F80 0x00046130 0x00046130 Notable pml offsets: # Function Description Offset (1.</description></item><item><title>FileSystem</title><link>http://example.org/docs/games/titan/filesystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/games/titan/filesystem/</guid><description>TRPFD &amp;amp; TRPFS (FileSystem) # Description: # The trpfd is the file descriptor that points to files in the trpfs filesystem. The trpfs contains most of the game&amp;rsquo;s assets.</description></item><item><title>Model Importing</title><link>http://example.org/docs/guides/hayabusa/modelimporting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/guides/hayabusa/modelimporting/</guid><description>Hellos</description></item><item><title>Personal</title><link>http://example.org/docs/games/titan/personal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/games/titan/personal/</guid><description> Personal # Description: # Contains all the base stats, abilities, etc, as well as evo data.
Schema: # struct SpeciesInfo { species_index: uint16; species_form: uint16; species_model: uint16; color: uint8; bodytype: uint8; height: uint16; weight: uint16; res0: uint32; res1: uint32; res2: uint32; } struct StatInfo { HP: uint8; ATK: uint8; DEF: uint8; SPA: uint8; SPD: uint8; SPE: uint8; } struct GenderData { group: uint8; ratio: uint8; } struct EvoData { species: uint16; form: uint16; region: uint16; can_evolve: uint16; } struct ZukanData { index: uint16; group: uint8; } struct Move { move: uint16; level: int8; } table PersonalData { species: SpeciesInfo; is_present: bool; dex: ZukanData; type1: uint8; type2: uint8; ability1: uint16; ability2: uint16; ability3: uint16; growth: uint8; rate: uint8; gender: GenderData; group_1: uint8; group_2: uint8; evolution_data: EvoData; hatch_steps: uint8; base_friendship: uint8; unk_value: uint16; evo_stage: uint8; unk_flag: uint8; yield_info: StatInfo; stats: StatInfo; evo_table: uint32; technical_machines: [uint16]; egg_moves: [uint16]; reminder_moves: [uint16]; learnset: [Move]; } table PersonalTable { entries:[PersonalData]; } root_type PersonalTable;</description></item><item><title>PkNx</title><link>http://example.org/docs/tools/pknx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/tools/pknx/</guid><description>Description: # A package of Pok√©mon (Nintendo Switch) ROM Editing Tools, programmed in C#.
Link: # https://github.com/kwsch/pkNX</description></item><item><title>Switch Tool Box</title><link>http://example.org/docs/tools/switchtoolbox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/tools/switchtoolbox/</guid><description>Description: # A tool to edit many formats of Nintendo Switch, 3DS and Wii U.
Link: # https://github.com/KillzXGaming/Switch-Toolbox</description></item><item><title>Trinity Material (trmtr)</title><link>http://example.org/docs/games/titan/trmtr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/games/titan/trmtr/</guid><description> Trinity Material (trmtr) # Description: # Contains material stuff.
Schema: # namespace Titan.Model; file_extension &amp;#34;trmtr&amp;#34;; struct RGBA { r: float; g: float; b: float; a: float; } enum UVWrapMode: uint32 { //Time to test these as bit fields? WRAP = 0, //0000 CLAMP = 1, //0001 MIRROR = 6, //0110 MIRROR_ONCE = 7, //0111 } table SamplerState { SamplerState_0: uint32 = 0x0; //Never used SamplerState_1: uint32 = 0x0; //Never used SamplerState_2: uint32 = 0x0; //Never used SamplerState_3: uint32 = 0x0; //Never used SamplerState_4: uint32 = 0x0; //Never used SamplerState_5: uint32 = 0x0; //Never used SamplerState_6: uint32 = 0x0; //Never used SamplerState_7: uint32 = 0x0; //Never used SamplerState_8: uint32 = 0x0; //Never used repeat_u: UVWrapMode = WRAP; //0x1, 0x6 or 0x7 repeat_v: UVWrapMode = WRAP; //0x1, 0x6 or 0x7 repeat_w: UVWrapMode = WRAP; //Never used border_color: RGBA; } table Float4Parameter { color_name: string; color_value: RGBA; } table FloatParameter { float_name: string; float_value: float; } table IntParameter { int_name: string; int_value: int32 = -1; } table StringParameter { string_name: string; string_value: string; } table Shader { shader_name: string; shader_values: [StringParameter]; } table Texture { texture_name: string; texture_file: string; texture_slot: uint32 = 0; } table Byte_Extra { //Only pm0448 has it as 0x0 in Transparent Shader value: int8 = -1; } table Int_Extra { res_0: uint32; //0 when Transparent //1 when NonDirectional value: int32 = -1; } table Material{ name: string; shaders: [Shader]; textures: [Texture]; samplers: [SamplerState]; float_parameter: [FloatParameter]; unk_5: string; //Always empty float4_light_parameter: [Float4Parameter]; float4_parameter: [Float4Parameter]; unk_8: string; //Always empty int_parameter: [IntParameter]; unk_10: string; //Always empty unk_11: string; //Always empty unk_12: string; //Always empty byte_extra: Byte_Extra; int_extra: Int_Extra; alpha_type: string; } table TRMTR{ res_0: uint32; materials: [Material]; } root_type TRMTR;</description></item><item><title>Trinity Mod Loader</title><link>http://example.org/docs/tools/trinitymodloader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/tools/trinitymodloader/</guid><description>Description: # A small utility to make and manage mods, while also providing file extraction utilities.
Link: # https://github.com/pkZukan/gftool</description></item><item><title>Trinity Model (trmdl)</title><link>http://example.org/docs/games/titan/trmdl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/games/titan/trmdl/</guid><description> Trinity Model (trmdl) # Description: # Contains model stuff.
Schema: # namespace Titan.Model; file_extension &amp;#34;trmdl&amp;#34;; struct Vec3 { x:float; y:float; z:float; } struct Vec4 { x:float; y:float; z:float; w:float; } table trmeshes { filename: string; } table trskeleton { filename: string; } table LodIndex { unk0: uint32 = 0; } table Lod { index: [LodIndex]; lod_type: string; } table Bounds { min: Vec3; max: Vec3; } table TRMDL { unk0:uint32; meshes:[trmeshes]; skeleton:trskeleton; materials:[string]; lods:[Lod]; bounds: Bounds; unk_vec:Vec4; unk7: uint32; unk8: uint32; unk9: uint32; } root_type TRMDL;</description></item><item><title>RomFS</title><link>http://example.org/docs/games/titan/romfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/games/titan/romfs/</guid><description> Romfs contents: # Path File Type Notes /avalon/data/personal_array.bin Personal Previously known as Personal.bin</description></item></channel></rss>