<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on Zukan Docs</title><link>http://example.org/</link><description>Recent content in Home on Zukan Docs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 28 Oct 2022 21:41:40 -0400</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Asset Assistant</title><link>http://example.org/docs/tools/assetassistant/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/tools/assetassistant/</guid><description>Description: # A WIP re-impl of the AssetAssistant lib
Link: # https://github.com/Reisyukaku/AssetAssistant</description></item><item><title>Character Customization Data (ccdata)</title><link>http://example.org/docs/documentation/titan/formats/ccdata/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/ccdata/</guid><description> Character Customization Data (ccdata) # Description: # Contains entries pointing to trmdl and trmtr files.
Schema: # file_extension &amp;#34;ccdata&amp;#34;; table someTable2 { unk0: string; unk1: string; unk2: string; } table Entry { name: string; unk0: byte; model_file: string; material_file: string; unk2: byte; unk3: string; anim_files: [string]; } table CharacterCreationData { entries: [Entry]; unk1: someTable2; unk2: uint; unk3: string; } root_type CharacterCreationData;</description></item><item><title>Character Customization Data Master (ccdatam)</title><link>http://example.org/docs/documentation/titan/formats/ccdatam/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/ccdatam/</guid><description> Character Customization Data Master (ccdatam) # Description: # Contains a list of the ccdata files.
Schema: # file_extension &amp;#34;ccdatam&amp;#34;; table Entry { name: string; ccdata_file: string; unk0: string; } table CharacterCreationDataMaster { entries: [Entry]; } root_type CharacterCreationDataMaster;</description></item><item><title>Evolution Binary (evobin)</title><link>http://example.org/docs/documentation/hayabusa/formats/evobin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/evobin/</guid><description> Evolution Binary (evobin) # Description: # Stub
Schema: # namespace Hayabusa.PokemonLib; file_extension &amp;#34;evobin&amp;#34;; table EvoData { method: uint16; argument: uint16; species: uint16; form: uint16; level: uint16; } table Evo { evo_num: uint16 = 0; evo_unk: uint16 = 0; evo_data: [EvoData]; } table EvoBin { evos: [Evo]; } root_type EvoBin;</description></item><item><title>ExeFS</title><link>http://example.org/docs/documentation/beluga/exefs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/beluga/exefs/</guid><description> Let&amp;rsquo;s Go Pikachu &amp;amp; Eevee (ExeFS) # Beluga
Notable facts: # stub Notable offsets: # Function Description Offset Dummy Dummy 0x0</description></item><item><title>ExeFS</title><link>http://example.org/docs/documentation/delphis/exefs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/delphis/exefs/</guid><description> Brilliant Diamond &amp;amp; Shining Pearl (ExeFS) # Delphis
Notable facts: # Uses Unity engine The AssetAssistant lib is used as both the code for the game as well as the Unity tool used to package assets. Notable offsets: # Function Description Offset Dummy Dummy 0x0</description></item><item><title>ExeFS</title><link>http://example.org/docs/documentation/hayabusa/exefs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/exefs/</guid><description> Legends Arceus (ExeFS) # Hayabusa
Notable facts: # Uses Lua 5.3 Uses Sol for reflection between lua and cpp Notable Lua offsets: # Function Description Offset (1.0.0) lua_newstate Create a new LuaState struct 0x0006CF00 luaL_loadbufferx Loads a string of plaintext lua code 0x000555E0 lua_pcallk Calls loaded function on the stack 0x00052E10 lua_tostring Pops string off the lua stack 0x00050DA0 lua_settop Sets Lua stack 0x0004FF10 lua_gettop Gets Lua stack pos 0x0004FEF0 lua_type Get Lua type 0x00050310 luaB_print Prints lua value to stdout 0x00056880</description></item><item><title>ExeFS</title><link>http://example.org/docs/documentation/orion/exefs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/orion/exefs/</guid><description> Sword &amp;amp; Shield (ExeFS) # Orion
Notable facts: # stub Notable offsets: # Path File Type Notes dummy dummy dummy</description></item><item><title>ExeFS</title><link>http://example.org/docs/documentation/titan/exefs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/exefs/</guid><description>Scarlet &amp;amp; Violet (ExeFS) # Titan
Notable facts: # Uses new trpfs file system Uses Lua 5.4 Game logic written in haxe and compiled to binary lua A lot more game logic moved to haxe/lua than previous games Notable Lua offsets: # Function Description Offset (1.0.0) Offset (1.0.1) Offset (1.1.0) lua_newstate Create a new LuaState struct 0x00ADAE00 0x0003B420 0x0003B420 luaL_loadbufferx Loads a string of plaintext lua code 0x00D69E70 0x00D9EEF0 0x00DC6A80 lua_pcallk Calls loaded function on the stack 0x0099E3B0 0x009B96C0 0x009C8B20 lua_tostring Pops string off the lua stack 0x009AEB10 0x009CA610 0x009D99A0 lua_settop Sets Lua stack 0x0099DF80 0x009B9290 0x009C86F0 lua_gettop Gets Lua stack pos 0x0099DF60 0x009B9270 0x009C86D0 lua_type Get Lua type 0x00A4DD50 0x00A96B40 0x00AAEA90 luaB_print Prints lua value to stdout 0x00045F80 0x00046130 0x00046130 Notable pml offsets: # Function Description Offset (1.</description></item><item><title>FileSystem</title><link>http://example.org/docs/documentation/titan/formats/filesystem/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/filesystem/</guid><description>TRPFD &amp;amp; TRPFS (FileSystem) # Description: # The trpfd is the file descriptor that points to files in the trpfs filesystem. The trpfs contains most of the game&amp;rsquo;s assets.</description></item><item><title>GameFreak Pokemon Catalog (gfbpmcatalog)</title><link>http://example.org/docs/documentation/orion/formats/gfbpmcatalog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/orion/formats/gfbpmcatalog/</guid><description>Trinity Model (trmdl) # Description: # Contains definitions for pokemon. These definitions point to model files.
Schema: # include &amp;#34;species.fbs&amp;#34;; namespace GFLib.Pokemon; file_extension &amp;#34;gfbpokecfg&amp;#34;; table meshProperty { isVisible:bool = 0; meshName:string; } table meshEntries { entry:[meshProperty]; } table SpeciesSettings { SpeciesParamType:Size = 0; SpeciesSetting:[meshEntries]; } table materialEntry { materialName:string; } table gfbpokecfg { majorVer:uint32 = 0; //Might be a bit mask, either 3 or 5 minorVer:uint32; //Never defined speciesID:SpeciesID = 0; form_ID:uint16 = 0; //Used for female forms, alternate forms, GMax and Alolan forms name:string; //Always empty vec jp_name:string; //Always empty vec speciesType:SpeciesType = 0; size_index:Size = SIZE_S; //Height Info height:float = 1.</description></item><item><title>Model Importing</title><link>http://example.org/docs/guides/hayabusa/modelimporting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/guides/hayabusa/modelimporting/</guid><description>Hellos</description></item><item><title>Personal</title><link>http://example.org/docs/documentation/titan/formats/personal/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/personal/</guid><description> Personal # Description: # Contains all the base stats, abilities, etc, as well as evo data.
Schema: # struct SpeciesInfo { species_index: uint16; species_form: uint16; species_model: uint16; color: uint8; bodytype: uint8; height: uint16; weight: uint16; res0: uint32; res1: uint32; res2: uint32; } struct StatInfo { HP: uint8; ATK: uint8; DEF: uint8; SPA: uint8; SPD: uint8; SPE: uint8; } struct GenderData { group: uint8; ratio: uint8; } struct EvoData { species: uint16; form: uint16; region: uint16; can_evolve: uint16; } struct ZukanData { index: uint16; group: uint8; } struct Move { move: uint16; level: int8; } table PersonalData { species: SpeciesInfo; is_present: bool; dex: ZukanData; type1: uint8; type2: uint8; ability1: uint16; ability2: uint16; ability3: uint16; growth: uint8; rate: uint8; gender: GenderData; group_1: uint8; group_2: uint8; evolution_data: EvoData; hatch_steps: uint8; base_friendship: uint8; unk_value: uint16; evo_stage: uint8; unk_flag: uint8; yield_info: StatInfo; stats: StatInfo; evo_table: uint32; technical_machines: [uint16]; egg_moves: [uint16]; reminder_moves: [uint16]; learnset: [Move]; } table PersonalTable { entries:[PersonalData]; } root_type PersonalTable;</description></item><item><title>Personal Binary (perbin)</title><link>http://example.org/docs/documentation/hayabusa/formats/perbin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/perbin/</guid><description> Personal Binary (perbin) # Description: # Stub
Schema: # namespace Hayabusa.PokemonLib; file_extension &amp;#34;perbin&amp;#34;; //Thanks to pkNX team for this one table PersonalData { species: uint16; form: uint16 = 0x1; isPresent: bool; type1: uint8; type2: uint8; ability1: uint16; ability2: uint16; ability3: uint16; stat_HP: uint8; stat_ATK: uint8; stat_DEF: uint8; stat_SPA: uint8; stat_SPD: uint8; stat_SPE: uint8; gender: uint8; growth: uint8; stage: uint8; rate: uint8; unk: uint8; color: uint8; height: uint16; weight: uint16; TM_A: uint32; TM_B: uint32; TM_C: uint32; TM_D: uint32; TR_A: uint32; TR_B: uint32; TR_C: uint32; TR_D: uint32; type_tutor: uint32; baseEXP: uint16 = 0x122; EV_HP: uint8; EV_ATK: uint8; EV_DEF: uint8; EV_SPA: uint8; EV_SPD: uint8; EV_SPE: uint8; item_1: uint16; item_2: uint16; item_3: uint16; group_1: uint8; group_2: uint8; hatch_species: uint16; local_form: uint16; unk_45: uint8 ; unk_46: uint16; unk_47: uint8 ; base_friendship: uint8; hisui_dexno: uint16; national_dexno: uint16; hisui_local_1: uint32; hisui_local_2: uint32; hisui_local_3: uint32; hisui_local_4: uint32; hisui_local_5: uint32; move_shop1: uint32; move_shop2: uint32; } table PersonalTable { entries:[PersonalData]; } root_type PersonalTable;</description></item><item><title>PkNx</title><link>http://example.org/docs/tools/pknx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/tools/pknx/</guid><description>Description: # A package of Pokémon (Nintendo Switch) ROM Editing Tools, programmed in C#.
Link: # https://github.com/kwsch/pkNX</description></item><item><title>RomFS</title><link>http://example.org/docs/documentation/beluga/romfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/beluga/romfs/</guid><description> Let&amp;rsquo;s Go Pikachu &amp;amp; Eevee (RomFS) # Beluga
Romfs contents: # Path File Type Notes dummy dummy dummy</description></item><item><title>RomFS</title><link>http://example.org/docs/documentation/delphis/romfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/delphis/romfs/</guid><description> Brilliant Diamond &amp;amp; Shining Pearl (RomFS) # Delphis
Romfs contents: # Path File Type Notes dummy dummy dummy</description></item><item><title>RomFS</title><link>http://example.org/docs/documentation/orion/romfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/orion/romfs/</guid><description> Sword &amp;amp; Shield (RomFS) # Orion
Romfs contents: # Path File Type Notes /bin/pml/personal/personal_total.bin personal binary /bin/pml/evolution/evo_XXX.bin evo binary /bin/pml/waza/wazaXXXX.wazabin wazabin /bin/pokemon/table/poke_resource_table.gfbpmcatalog gfbpmcatalog Defines pokemon /bin/pokemon/table/gpoke_resource_table.gfbpmcatalog gfbpmcatalog Defines gigantimax pokemon</description></item><item><title>Switch Tool Box</title><link>http://example.org/docs/tools/switchtoolbox/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/tools/switchtoolbox/</guid><description>Description: # A tool to edit many formats of Nintendo Switch, 3DS and Wii U.
Link: # https://github.com/KillzXGaming/Switch-Toolbox</description></item><item><title>Trinity Material (trmtr)</title><link>http://example.org/docs/documentation/titan/formats/trmtr/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trmtr/</guid><description> Trinity Material (trmtr) # Description: # Contains material stuff.
Schema: # namespace Titan.Model; file_extension &amp;#34;trmtr&amp;#34;; struct RGBA { r: float; g: float; b: float; a: float; } enum UVWrapMode: uint32 { //Time to test these as bit fields? WRAP = 0, //0000 CLAMP = 1, //0001 MIRROR = 6, //0110 MIRROR_ONCE = 7, //0111 } table SamplerState { SamplerState_0: uint32 = 0x0; //Never used SamplerState_1: uint32 = 0x0; //Never used SamplerState_2: uint32 = 0x0; //Never used SamplerState_3: uint32 = 0x0; //Never used SamplerState_4: uint32 = 0x0; //Never used SamplerState_5: uint32 = 0x0; //Never used SamplerState_6: uint32 = 0x0; //Never used SamplerState_7: uint32 = 0x0; //Never used SamplerState_8: uint32 = 0x0; //Never used repeat_u: UVWrapMode = WRAP; //0x1, 0x6 or 0x7 repeat_v: UVWrapMode = WRAP; //0x1, 0x6 or 0x7 repeat_w: UVWrapMode = WRAP; //Never used border_color: RGBA; } table Float4Parameter { color_name: string; color_value: RGBA; } table FloatParameter { float_name: string; float_value: float; } table IntParameter { int_name: string; int_value: int32 = -1; } table StringParameter { string_name: string; string_value: string; } table Shader { shader_name: string; shader_values: [StringParameter]; } table Texture { texture_name: string; texture_file: string; texture_slot: uint32 = 0; } table Byte_Extra { //Only pm0448 has it as 0x0 in Transparent Shader value: int8 = -1; } table Int_Extra { res_0: uint32; //0 when Transparent //1 when NonDirectional value: int32 = -1; } table Material{ name: string; shaders: [Shader]; textures: [Texture]; samplers: [SamplerState]; float_parameter: [FloatParameter]; unk_5: string; //Always empty float4_light_parameter: [Float4Parameter]; float4_parameter: [Float4Parameter]; unk_8: string; //Always empty int_parameter: [IntParameter]; unk_10: string; //Always empty unk_11: string; //Always empty unk_12: string; //Always empty byte_extra: Byte_Extra; int_extra: Int_Extra; alpha_type: string; } table TRMTR{ res_0: uint32; materials: [Material]; } root_type TRMTR;</description></item><item><title>Trinity Mod Loader</title><link>http://example.org/docs/tools/trinitymodloader/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/tools/trinitymodloader/</guid><description>Description: # A small utility to make and manage mods, while also providing file extraction utilities.
Link: # https://github.com/pkZukan/gftool</description></item><item><title>Trinity Model (trmdl)</title><link>http://example.org/docs/documentation/titan/formats/trmdl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/formats/trmdl/</guid><description> Trinity Model (trmdl) # Description: # Contains model stuff.
Schema: # namespace Titan.Model; file_extension &amp;#34;trmdl&amp;#34;; struct Vec3 { x:float; y:float; z:float; } struct Vec4 { x:float; y:float; z:float; w:float; } table trmeshes { filename: string; } table trskeleton { filename: string; } table LodIndex { unk0: uint32 = 0; } table Lod { index: [LodIndex]; lod_type: string; } table Bounds { min: Vec3; max: Vec3; } table TRMDL { unk0:uint32; meshes:[trmeshes]; skeleton:trskeleton; materials:[string]; lods:[Lod]; bounds: Bounds; unk_vec:Vec4; unk7: uint32; unk8: uint32; unk9: uint32; } root_type TRMDL;</description></item><item><title>Waza Binary (wazabin)</title><link>http://example.org/docs/documentation/hayabusa/formats/wazabin/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/formats/wazabin/</guid><description>Waza Binary (wazabin) # Description: # Stub
Schema: # namespace Hayabusa.PokemonLib; file_extension &amp;#34;wbin&amp;#34;; struct Vec3 { x: float; y: float; z: float; } struct ByteRGB { r: uint8; g: uint8; b: uint8; } union WazaCommand { WazaCommand0x1, ParticleCreate, WazaCommand0x3, WazaCommand0x4, WazaCommand0x5, WazaCommand0x6, WazaCommand0x7, WazaCommand0x8, WazaCommand0x9, WazaCommand0xa, WazaCommand0xb, WazaCommand0xc, ParticleScale, WazaCommand0xe, WazaCommand0xf, WazaCommand0x10, WazaCommand0x11, WazaCommand0x12, WazaCommand0x13, WazaCommand0x14, WazaCommand0x15, WazaCommand0x16, WazaCommand0x17, WazaCommand0x18, WazaCommand0x19, WazaCommand0x1a, WazaCommand0x1b, WazaCommand0x1c, WazaCommand0x1d, WazaCommand0x1e, WazaCommand0x1f, WazaCommand0x20, WazaCommand0x21, WazaCommand0x22, WazaCommand0x23, WazaCommand0x24, WazaCommand0x25, WazaCommand0x26, WazaCommand0x27, WazaCommand0x28, WazaCommand0x29, WazaCommand0x2a, WazaCommand0x2b, WazaCommand0x2c, WazaCommand0x2d, WazaCommand0x2e, WazaCommand0x2f, WazaCommand0x30, WazaCommand0x31, WazaCommand0x32, WazaCommand0x33, WazaCommand0x34, WazaCommand0x35, WazaCommand0x36, WazaCommand0x37, WazaCommand0x38, WazaCommand0x39, WazaCommand0x3a, WazaCommand0x3b, WazaCommand0x3c, WazaCommand0x3d, WazaCommand0x3e, WazaCommand0x3f, WazaCommand0x40, WazaCommand0x41, WazaCommand0x42, WazaCommand0x43, WazaCommand0x44, WazaCommand0x45, WazaCommand0x46, WazaCommand0x47, WazaCommand0x48, WazaCommand0x49, WazaCommand0x4a, WazaCommand0x4b, WazaCommand0x4c, WazaCommand0x4d, WazaCommand0x4e, WazaCommand0x4f, WazaCommand0x50, WazaCommand0x51, WazaCommand0x52, WazaCommand0x53, WazaCommand0x54, WazaCommand0x55, WazaCommand0x56, WazaCommand0x57, WazaCommand0x58, WazaCommand0x59, WazaCommand0x5a, WazaCommand0x5b, WazaCommand0x5c, WazaCommand0x5d, WazaCommand0x5e, WazaCommand0x5f, WazaCommand0x60, WazaCommand0x61, WazaCommand0x62, WazaCommand0x63, WazaCommand0x64, WazaCommand0x65, WazaCommand0x66, WazaCommand0x67, WazaCommand0x68, WazaCommand0x69, WazaCommand0x6a, WazaCommand0x6b, WazaCommand0x6c, WazaCommand0x6d, WazaCommand0x6e, WazaCommand0x6f, WazaCommand0x70, WazaCommand0x71, WazaCommand0x72, WazaCommand0x73, WazaCommand0x74, WazaCommand0x75, WazaCommand0x76, WazaCommand0x77, WazaCommand0x78, WazaCommand0x79, WazaCommand0x7a, WazaCommand0x7b, WazaCommand0x7c, WazaCommand0x7d, WazaCommand0x7e, WazaCommand0x7f, WazaCommand0x80, WazaCommand0x81, WazaCommand0x82, WazaCommand0x83, WazaCommand0x84, WazaCommand0x85, WazaCommand0x86, WazaCommand0x87, WazaCommand0x88, WazaCommand0x89, WazaCommand0x8a, WazaCommand0x8b, WazaCommand0x8c, WazaCommand0x8d, WazaCommand0x8e, WazaCommand0x8f, WazaCommand0x90, WazaCommand0x91, WazaCommand0x92, WazaCommand0x93, Sound3DEvent0x94, Sound3DEvent0x95, Sound3DSoundPostEvent, WazaCommand0x97, WazaCommand0x98, WazaCommand0x99, WazaCommand0x9a, WazaCommand0x9b, WazaCommand0x9c, WazaCommand0x9d, WazaCommand0x9e, WazaCommand0x9f, WazaCommand0xa0, WazaCommand0xa1, WazaCommand0xa2, WazaCommand0xa3, WazaCommand0xa4, WazaCommand0xa5, WazaCommand0xa6, WazaCommand0xa7, WazaCommand0xa8, WazaCommand0xa9, WazaCommand0xaa, WazaCommand0xab, WazaCommand0xac, WazaCommand0xad, WazaCommand0xae, WazaCommand0xaf, WazaCommand0xb0, WazaCommand0xb1, WazaCommand0xb2, WazaCommand0xb3, WazaCommand0xb4, WazaCommand0xb5, WazaCommand0xb6, } table DummyValue { } //cmn_affinity_none.</description></item><item><title>RomFS</title><link>http://example.org/docs/documentation/hayabusa/romfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/hayabusa/romfs/</guid><description> Legends Arceus (RomFS) # Hayabusa
Romfs contents: # Path File Type Notes /bin/pml/personal/personal_data_total.perbin perbin Previously known as personal_total.bin /bin/pml/evolution/evolution_data_total.evobin evobin /bin/pml/waza/wazaXXXX.wazabin wazabin</description></item><item><title>RomFS</title><link>http://example.org/docs/documentation/titan/romfs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/docs/documentation/titan/romfs/</guid><description>Scarlet &amp;amp; Violet (RomFS) # Titan
Romfs contents: # Path File Type Notes /avalon/data/personal_array.bin Personal Previously known as personal_total.bin General tribal knowledge: # Migrating models from PLA works fairly well with minor changes. The main difference being the file hierarchy (The engine hardcodes paths so this hierarchy must be followed). Some parameters for trmtr have changed as well. PLA pokemon uses a int param &amp;ldquo;CategoryLabel&amp;rdquo; of 2 whereas SV uses 6 for lighting.</description></item></channel></rss>